
nRFCommunication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036dc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003870  08003870  00013870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038a0  080038a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038a8  080038a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038a8  080038a8  000138a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038ac  080038ac  000138ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  2000000c  080038bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  080038bc  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ed5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015ea  00000000  00000000  00027f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  00029500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000708  00000000  00000000  00029cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014a5d  00000000  00000000  0002a3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007c0c  00000000  00000000  0003ee15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080aa9  00000000  00000000  00046a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c74ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000205c  00000000  00000000  000c7520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003858 	.word	0x08003858

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003858 	.word	0x08003858

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <NRF24_DelayMicroSeconds>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <NRF24_DelayMicroSeconds+0x3c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0b      	ldr	r2, [pc, #44]	; (800050c <NRF24_DelayMicroSeconds+0x40>)
 80004de:	fba2 2303 	umull	r2, r3, r2, r3
 80004e2:	0c9a      	lsrs	r2, r3, #18
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	fb02 f303 	mul.w	r3, r2, r3
 80004ea:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80004ec:	bf00      	nop
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	1e5a      	subs	r2, r3, #1
 80004f2:	60fa      	str	r2, [r7, #12]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d1fa      	bne.n	80004ee <NRF24_DelayMicroSeconds+0x22>
}
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000000 	.word	0x20000000
 800050c:	165e9f81 	.word	0x165e9f81

08000510 <PinStatusSetter>:
//SMD TRANSMİT.
void PinStatusSetter(uint16_t gpio_pin,int pin_state)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	6039      	str	r1, [r7, #0]
 800051a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA,gpio_pin , pin_state);
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	b2da      	uxtb	r2, r3
 8000520:	88fb      	ldrh	r3, [r7, #6]
 8000522:	4619      	mov	r1, r3
 8000524:	4803      	ldr	r0, [pc, #12]	; (8000534 <PinStatusSetter+0x24>)
 8000526:	f001 fe3d 	bl	80021a4 <HAL_GPIO_WritePin>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40020000 	.word	0x40020000

08000538 <Nrf24ReadRegisterSpi1>:

uint8_t Nrf24ReadRegisterSpi1(SPI_HandleTypeDef hspix,uint8_t reg)
{
 8000538:	b084      	sub	sp, #16
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
 8000540:	f107 0c10 	add.w	ip, r7, #16
 8000544:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	PinStatusSetter(DIP_CSN_Pin , 0);
 8000548:	2100      	movs	r1, #0
 800054a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800054e:	f7ff ffdf 	bl	8000510 <PinStatusSetter>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000552:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000556:	f003 031f 	and.w	r3, r3, #31
 800055a:	b2db      	uxtb	r3, r3
 800055c:	713b      	strb	r3, [r7, #4]
	HAL_SPI_Transmit(&hspix, spiBuf, 1, 100);
 800055e:	1d39      	adds	r1, r7, #4
 8000560:	2364      	movs	r3, #100	; 0x64
 8000562:	2201      	movs	r2, #1
 8000564:	f107 0010 	add.w	r0, r7, #16
 8000568:	f002 faff 	bl	8002b6a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&hspix, &spiBuf[1], 1, 100);
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	1c59      	adds	r1, r3, #1
 8000570:	2364      	movs	r3, #100	; 0x64
 8000572:	2201      	movs	r2, #1
 8000574:	f107 0010 	add.w	r0, r7, #16
 8000578:	f002 fc33 	bl	8002de2 <HAL_SPI_Receive>
	retData = spiBuf[1];
 800057c:	797b      	ldrb	r3, [r7, #5]
 800057e:	71fb      	strb	r3, [r7, #7]
	//Bring CSN high
	PinStatusSetter(DIP_CSN_Pin , 1);
 8000580:	2101      	movs	r1, #1
 8000582:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000586:	f7ff ffc3 	bl	8000510 <PinStatusSetter>
	spiBuf[1] =0;
 800058a:	2300      	movs	r3, #0
 800058c:	717b      	strb	r3, [r7, #5]
	return retData;
 800058e:	79fb      	ldrb	r3, [r7, #7]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800059a:	b004      	add	sp, #16
 800059c:	4770      	bx	lr

0800059e <Nrf24WriteRegisterSpi1>:
void Nrf24WriteRegisterSpi1(SPI_HandleTypeDef hspix,uint8_t reg, uint8_t value)
{
 800059e:	b084      	sub	sp, #16
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	f107 0c10 	add.w	ip, r7, #16
 80005aa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiBuf[3];
	//Put CSN low
	PinStatusSetter(DIP_CSN_Pin , 0);
 80005ae:	2100      	movs	r1, #0
 80005b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80005b4:	f7ff ffac 	bl	8000510 <PinStatusSetter>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80005b8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80005bc:	f043 0320 	orr.w	r3, r3, #32
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	713b      	strb	r3, [r7, #4]
	spiBuf[1] = value;
 80005c4:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80005c8:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&hspix, spiBuf, 2, 100);
 80005ca:	1d39      	adds	r1, r7, #4
 80005cc:	2364      	movs	r3, #100	; 0x64
 80005ce:	2202      	movs	r2, #2
 80005d0:	f107 0010 	add.w	r0, r7, #16
 80005d4:	f002 fac9 	bl	8002b6a <HAL_SPI_Transmit>
	//Bring CSN high
	PinStatusSetter(DIP_CSN_Pin ,1);
 80005d8:	2101      	movs	r1, #1
 80005da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80005de:	f7ff ff97 	bl	8000510 <PinStatusSetter>
	spiBuf[1] = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	717b      	strb	r3, [r7, #5]
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005f0:	b004      	add	sp, #16
 80005f2:	4770      	bx	lr

080005f4 <TxAddrReadSpi1>:
//Spi1'e bağlanan nRF24L01'in TX_ADDR Registerındaki 5 bytelik adresi okuyoruz.
void TxAddrReadSpi1(SPI_HandleTypeDef hspix,uint8_t reg ,uint8_t len)
{
 80005f4:	b084      	sub	sp, #16
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b084      	sub	sp, #16
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	f107 0c18 	add.w	ip, r7, #24
 8000600:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t Buf[3];
	uint8_t address[5];
	Buf[0] = reg&0x1F;
 8000604:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000608:	f003 031f 	and.w	r3, r3, #31
 800060c:	b2db      	uxtb	r3, r3
 800060e:	733b      	strb	r3, [r7, #12]

	PinStatusSetter(DIP_CSN_Pin ,0);
 8000610:	2100      	movs	r1, #0
 8000612:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000616:	f7ff ff7b 	bl	8000510 <PinStatusSetter>
	HAL_SPI_Transmit(&hspix, &Buf[0], 1,100);
 800061a:	f107 010c 	add.w	r1, r7, #12
 800061e:	2364      	movs	r3, #100	; 0x64
 8000620:	2201      	movs	r2, #1
 8000622:	f107 0018 	add.w	r0, r7, #24
 8000626:	f002 faa0 	bl	8002b6a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspix, address, len,100);
 800062a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800062e:	b29a      	uxth	r2, r3
 8000630:	1d39      	adds	r1, r7, #4
 8000632:	2364      	movs	r3, #100	; 0x64
 8000634:	f107 0018 	add.w	r0, r7, #24
 8000638:	f002 fbd3 	bl	8002de2 <HAL_SPI_Receive>

	PinStatusSetter(DIP_CSN_Pin , 1);
 800063c:	2101      	movs	r1, #1
 800063e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000642:	f7ff ff65 	bl	8000510 <PinStatusSetter>
}
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000650:	b004      	add	sp, #16
 8000652:	4770      	bx	lr

08000654 <TxAddrSpi1>:
//Spi1'e bağlanan nRF24L01'in TX_ADDR Registerına 5 bytelik değer veriyoruz.
void TxAddrSpi1(SPI_HandleTypeDef hspix ,uint8_t reg  ,uint8_t len)
{
 8000654:	b084      	sub	sp, #16
 8000656:	b580      	push	{r7, lr}
 8000658:	b084      	sub	sp, #16
 800065a:	af00      	add	r7, sp, #0
 800065c:	f107 0c18 	add.w	ip, r7, #24
 8000660:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t Buf[1];

	uint8_t REG_TX_ADDR_VALUE[5];
	REG_TX_ADDR_VALUE[0] = 0x11,REG_TX_ADDR_VALUE[1] =0x11,REG_TX_ADDR_VALUE[2] =0x11,
 8000664:	2311      	movs	r3, #17
 8000666:	713b      	strb	r3, [r7, #4]
 8000668:	2311      	movs	r3, #17
 800066a:	717b      	strb	r3, [r7, #5]
 800066c:	2311      	movs	r3, #17
 800066e:	71bb      	strb	r3, [r7, #6]
			REG_TX_ADDR_VALUE[3] =0x11,REG_TX_ADDR_VALUE[4] =0x11;
 8000670:	2311      	movs	r3, #17
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	2311      	movs	r3, #17
 8000676:	723b      	strb	r3, [r7, #8]
	Buf[0] = reg|0x20;
 8000678:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800067c:	f043 0320 	orr.w	r3, r3, #32
 8000680:	b2db      	uxtb	r3, r3
 8000682:	733b      	strb	r3, [r7, #12]

	PinStatusSetter(DIP_CSN_Pin , 0);
 8000684:	2100      	movs	r1, #0
 8000686:	f44f 7080 	mov.w	r0, #256	; 0x100
 800068a:	f7ff ff41 	bl	8000510 <PinStatusSetter>
	HAL_SPI_Transmit(&hspix, Buf, 2, 100);
 800068e:	f107 010c 	add.w	r1, r7, #12
 8000692:	2364      	movs	r3, #100	; 0x64
 8000694:	2202      	movs	r2, #2
 8000696:	f107 0018 	add.w	r0, r7, #24
 800069a:	f002 fa66 	bl	8002b6a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspix, (uint8_t*)REG_TX_ADDR_VALUE, len, 100);
 800069e:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	1d39      	adds	r1, r7, #4
 80006a6:	2364      	movs	r3, #100	; 0x64
 80006a8:	f107 0018 	add.w	r0, r7, #24
 80006ac:	f002 fa5d 	bl	8002b6a <HAL_SPI_Transmit>
	PinStatusSetter(DIP_CSN_Pin , 1);
 80006b0:	2101      	movs	r1, #1
 80006b2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80006b6:	f7ff ff2b 	bl	8000510 <PinStatusSetter>
}
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006c4:	b004      	add	sp, #16
 80006c6:	4770      	bx	lr

080006c8 <RX_ADDR_P0_Write>:
//SPI1'e bağladığımız nRF24L01'in RX_ADDR_P0 adresini yazıyoruz.
void RX_ADDR_P0_Write(SPI_HandleTypeDef hspix,uint8_t reg,uint8_t len)
{
 80006c8:	b084      	sub	sp, #16
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b084      	sub	sp, #16
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	f107 0c18 	add.w	ip, r7, #24
 80006d4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t Buf[1];
	Buf[0] = reg|0x20;
 80006d8:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80006dc:	f043 0320 	orr.w	r3, r3, #32
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	733b      	strb	r3, [r7, #12]
	uint8_t REG_RX_ADDR_P0_VALUE[5];

	REG_RX_ADDR_P0_VALUE[0] = 0x11,REG_RX_ADDR_P0_VALUE[1] =0x11,REG_RX_ADDR_P0_VALUE[2] =0x11,
 80006e4:	2311      	movs	r3, #17
 80006e6:	713b      	strb	r3, [r7, #4]
 80006e8:	2311      	movs	r3, #17
 80006ea:	717b      	strb	r3, [r7, #5]
 80006ec:	2311      	movs	r3, #17
 80006ee:	71bb      	strb	r3, [r7, #6]
			REG_RX_ADDR_P0_VALUE[3] =0x11,REG_RX_ADDR_P0_VALUE[4] =0x11;
 80006f0:	2311      	movs	r3, #17
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	2311      	movs	r3, #17
 80006f6:	723b      	strb	r3, [r7, #8]
	PinStatusSetter(DIP_CSN_Pin , 0);
 80006f8:	2100      	movs	r1, #0
 80006fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80006fe:	f7ff ff07 	bl	8000510 <PinStatusSetter>
	HAL_SPI_Transmit(&hspix, Buf, 1, 100);
 8000702:	f107 010c 	add.w	r1, r7, #12
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2201      	movs	r2, #1
 800070a:	f107 0018 	add.w	r0, r7, #24
 800070e:	f002 fa2c 	bl	8002b6a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspix,REG_RX_ADDR_P0_VALUE, len, 100);
 8000712:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000716:	b29a      	uxth	r2, r3
 8000718:	1d39      	adds	r1, r7, #4
 800071a:	2364      	movs	r3, #100	; 0x64
 800071c:	f107 0018 	add.w	r0, r7, #24
 8000720:	f002 fa23 	bl	8002b6a <HAL_SPI_Transmit>
	PinStatusSetter(DIP_CSN_Pin ,1);
 8000724:	2101      	movs	r1, #1
 8000726:	f44f 7080 	mov.w	r0, #256	; 0x100
 800072a:	f7ff fef1 	bl	8000510 <PinStatusSetter>
}
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000738:	b004      	add	sp, #16
 800073a:	4770      	bx	lr

0800073c <RX_ADDR_P0_Read>:
//SPI1'e bağladığımız nRF24L01'in RX_ADDR_P0 adresini okuyoruz.
void RX_ADDR_P0_Read(SPI_HandleTypeDef hspix,uint8_t reg)
{
 800073c:	b084      	sub	sp, #16
 800073e:	b580      	push	{r7, lr}
 8000740:	b084      	sub	sp, #16
 8000742:	af00      	add	r7, sp, #0
 8000744:	f107 0c18 	add.w	ip, r7, #24
 8000748:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t ReadBuf[5];
	uint8_t Buf[1];
	Buf[0] = reg&0x1F;
 800074c:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000750:	f003 031f 	and.w	r3, r3, #31
 8000754:	b2db      	uxtb	r3, r3
 8000756:	713b      	strb	r3, [r7, #4]
	PinStatusSetter(DIP_CSN_Pin , 0);
 8000758:	2100      	movs	r1, #0
 800075a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800075e:	f7ff fed7 	bl	8000510 <PinStatusSetter>
	HAL_SPI_Transmit(&hspix, Buf, 1, 100);
 8000762:	1d39      	adds	r1, r7, #4
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	2201      	movs	r2, #1
 8000768:	f107 0018 	add.w	r0, r7, #24
 800076c:	f002 f9fd 	bl	8002b6a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspix, ReadBuf, 5 , 100);
 8000770:	f107 0108 	add.w	r1, r7, #8
 8000774:	2364      	movs	r3, #100	; 0x64
 8000776:	2205      	movs	r2, #5
 8000778:	f107 0018 	add.w	r0, r7, #24
 800077c:	f002 fb31 	bl	8002de2 <HAL_SPI_Receive>
	PinStatusSetter(DIP_CSN_Pin ,1);
 8000780:	2101      	movs	r1, #1
 8000782:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000786:	f7ff fec3 	bl	8000510 <PinStatusSetter>
}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000794:	b004      	add	sp, #16
 8000796:	4770      	bx	lr

08000798 <RfSetupSp1>:
//SPI2'ye bağlı nRF24L01'in data rate ve çıkış gücünü ayarlıyoruz.
void RfSetupSp1(SPI_HandleTypeDef hspix,uint8_t reg,uint8_t value)
{
 8000798:	b084      	sub	sp, #16
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	f107 0c10 	add.w	ip, r7, #16
 80007a4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiBuf[3];
	//Put CSN low
	PinStatusSetter(DIP_CSN_Pin , 0);
 80007a8:	2100      	movs	r1, #0
 80007aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80007ae:	f7ff feaf 	bl	8000510 <PinStatusSetter>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80007b2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80007b6:	f043 0320 	orr.w	r3, r3, #32
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	713b      	strb	r3, [r7, #4]
	spiBuf[1] = value;
 80007be:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80007c2:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&hspix, spiBuf, 2, 100);
 80007c4:	1d39      	adds	r1, r7, #4
 80007c6:	2364      	movs	r3, #100	; 0x64
 80007c8:	2202      	movs	r2, #2
 80007ca:	f107 0010 	add.w	r0, r7, #16
 80007ce:	f002 f9cc 	bl	8002b6a <HAL_SPI_Transmit>
	//Bring CSN high
	PinStatusSetter(DIP_CSN_Pin ,1);
 80007d2:	2101      	movs	r1, #1
 80007d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80007d8:	f7ff fe9a 	bl	8000510 <PinStatusSetter>
	spiBuf[1] = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	717b      	strb	r3, [r7, #5]
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007ea:	b004      	add	sp, #16
 80007ec:	4770      	bx	lr

080007ee <RfSetupReadSp1>:
//SPI2'ye bağlı nRF24L01'in data rate ve RF çıkış gücünü okuyoruz.
uint8_t RfSetupReadSp1(SPI_HandleTypeDef hspix,uint8_t reg)
{
 80007ee:	b084      	sub	sp, #16
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	f107 0c10 	add.w	ip, r7, #16
 80007fa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiBuf[3];
	uint8_t retData =0;
 80007fe:	2300      	movs	r3, #0
 8000800:	71fb      	strb	r3, [r7, #7]
	//Put CSN low
	PinStatusSetter(DIP_CSN_Pin , 0);
 8000802:	2100      	movs	r1, #0
 8000804:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000808:	f7ff fe82 	bl	8000510 <PinStatusSetter>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800080c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000810:	f003 031f 	and.w	r3, r3, #31
 8000814:	b2db      	uxtb	r3, r3
 8000816:	713b      	strb	r3, [r7, #4]
	HAL_SPI_Transmit(&hspix, spiBuf, 1, 100);
 8000818:	1d39      	adds	r1, r7, #4
 800081a:	2364      	movs	r3, #100	; 0x64
 800081c:	2201      	movs	r2, #1
 800081e:	f107 0010 	add.w	r0, r7, #16
 8000822:	f002 f9a2 	bl	8002b6a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&hspix, &spiBuf[1], 1, 100);
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	1c59      	adds	r1, r3, #1
 800082a:	2364      	movs	r3, #100	; 0x64
 800082c:	2201      	movs	r2, #1
 800082e:	f107 0010 	add.w	r0, r7, #16
 8000832:	f002 fad6 	bl	8002de2 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000836:	797b      	ldrb	r3, [r7, #5]
 8000838:	71fb      	strb	r3, [r7, #7]
	//Bring CSN high
	PinStatusSetter(DIP_CSN_Pin , 1);
 800083a:	2101      	movs	r1, #1
 800083c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000840:	f7ff fe66 	bl	8000510 <PinStatusSetter>
	spiBuf[1] =0;
 8000844:	2300      	movs	r3, #0
 8000846:	717b      	strb	r3, [r7, #5]
	return retData;
 8000848:	79fb      	ldrb	r3, [r7, #7]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000854:	b004      	add	sp, #16
 8000856:	4770      	bx	lr

08000858 <RfChSpi1>:
//Rf Sinyalini ayarlıyoruz.
void RfChSpi1(SPI_HandleTypeDef hspix,uint8_t reg,uint8_t value)
{
 8000858:	b084      	sub	sp, #16
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	f107 0c10 	add.w	ip, r7, #16
 8000864:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiBuf[3];
	//Put CSN low
	PinStatusSetter(DIP_CSN_Pin , 0);
 8000868:	2100      	movs	r1, #0
 800086a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800086e:	f7ff fe4f 	bl	8000510 <PinStatusSetter>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000872:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000876:	f043 0320 	orr.w	r3, r3, #32
 800087a:	b2db      	uxtb	r3, r3
 800087c:	713b      	strb	r3, [r7, #4]
	spiBuf[1] = value;
 800087e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000882:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&hspix, spiBuf, 2, 100);
 8000884:	1d39      	adds	r1, r7, #4
 8000886:	2364      	movs	r3, #100	; 0x64
 8000888:	2202      	movs	r2, #2
 800088a:	f107 0010 	add.w	r0, r7, #16
 800088e:	f002 f96c 	bl	8002b6a <HAL_SPI_Transmit>
	//Bring CSN high
	PinStatusSetter(DIP_CSN_Pin ,1);
 8000892:	2101      	movs	r1, #1
 8000894:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000898:	f7ff fe3a 	bl	8000510 <PinStatusSetter>
	spiBuf[1] = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	717b      	strb	r3, [r7, #5]
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008aa:	b004      	add	sp, #16
 80008ac:	4770      	bx	lr

080008ae <RfChReadSpi1>:
//Rf sinyalini okuyoruz.
uint8_t RfChReadSpi1(SPI_HandleTypeDef hspix,uint8_t reg)
{
 80008ae:	b084      	sub	sp, #16
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	f107 0c10 	add.w	ip, r7, #16
 80008ba:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiBuf[3];
	uint8_t retData =0;
 80008be:	2300      	movs	r3, #0
 80008c0:	71fb      	strb	r3, [r7, #7]
	//Put CSN low
	PinStatusSetter(DIP_CSN_Pin , 0);
 80008c2:	2100      	movs	r1, #0
 80008c4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80008c8:	f7ff fe22 	bl	8000510 <PinStatusSetter>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008cc:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80008d0:	f003 031f 	and.w	r3, r3, #31
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	713b      	strb	r3, [r7, #4]
	HAL_SPI_Transmit(&hspix, spiBuf, 1, 100);
 80008d8:	1d39      	adds	r1, r7, #4
 80008da:	2364      	movs	r3, #100	; 0x64
 80008dc:	2201      	movs	r2, #1
 80008de:	f107 0010 	add.w	r0, r7, #16
 80008e2:	f002 f942 	bl	8002b6a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&hspix, &spiBuf[1], 1, 100);
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	1c59      	adds	r1, r3, #1
 80008ea:	2364      	movs	r3, #100	; 0x64
 80008ec:	2201      	movs	r2, #1
 80008ee:	f107 0010 	add.w	r0, r7, #16
 80008f2:	f002 fa76 	bl	8002de2 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008f6:	797b      	ldrb	r3, [r7, #5]
 80008f8:	71fb      	strb	r3, [r7, #7]
	//Bring CSN high
	PinStatusSetter(DIP_CSN_Pin , 1);
 80008fa:	2101      	movs	r1, #1
 80008fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000900:	f7ff fe06 	bl	8000510 <PinStatusSetter>
	spiBuf[1] =0;
 8000904:	2300      	movs	r3, #0
 8000906:	717b      	strb	r3, [r7, #5]
	return retData;
 8000908:	79fb      	ldrb	r3, [r7, #7]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000914:	b004      	add	sp, #16
 8000916:	4770      	bx	lr

08000918 <TxPayload>:
//Payload edeceğimiz datayı yazıyoruz.
void TxPayload(SPI_HandleTypeDef hspix,uint8_t reg)
{
 8000918:	b084      	sub	sp, #16
 800091a:	b5b0      	push	{r4, r5, r7, lr}
 800091c:	b088      	sub	sp, #32
 800091e:	af00      	add	r7, sp, #0
 8000920:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000924:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t pld[32] = "ELEKTRONIKBILISIMSISTEMLUHMANN";
 8000928:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <TxPayload+0x7c>)
 800092a:	463c      	mov	r4, r7
 800092c:	461d      	mov	r5, r3
 800092e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000932:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000936:	c407      	stmia	r4!, {r0, r1, r2}
 8000938:	8023      	strh	r3, [r4, #0]
 800093a:	3402      	adds	r4, #2
 800093c:	0c1b      	lsrs	r3, r3, #16
 800093e:	7023      	strb	r3, [r4, #0]
 8000940:	2300      	movs	r3, #0
 8000942:	77fb      	strb	r3, [r7, #31]

	PinStatusSetter(DIP_CSN_Pin , 0);
 8000944:	2100      	movs	r1, #0
 8000946:	f44f 7080 	mov.w	r0, #256	; 0x100
 800094a:	f7ff fde1 	bl	8000510 <PinStatusSetter>
	HAL_SPI_Transmit(&hspix, &reg, 1, 100);
 800094e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8000952:	2364      	movs	r3, #100	; 0x64
 8000954:	2201      	movs	r2, #1
 8000956:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800095a:	f002 f906 	bl	8002b6a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspix, pld, 32, 100);
 800095e:	4639      	mov	r1, r7
 8000960:	2364      	movs	r3, #100	; 0x64
 8000962:	2220      	movs	r2, #32
 8000964:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000968:	f002 f8ff 	bl	8002b6a <HAL_SPI_Transmit>
	PinStatusSetter(DIP_CSN_Pin , 1);
 800096c:	2101      	movs	r1, #1
 800096e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000972:	f7ff fdcd 	bl	8000510 <PinStatusSetter>

	PinStatusSetter(DIP_CE_Pin, 1);
 8000976:	2101      	movs	r1, #1
 8000978:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800097c:	f7ff fdc8 	bl	8000510 <PinStatusSetter>
	NRF24_DelayMicroSeconds(15);
 8000980:	200f      	movs	r0, #15
 8000982:	f7ff fda3 	bl	80004cc <NRF24_DelayMicroSeconds>
}
 8000986:	bf00      	nop
 8000988:	3720      	adds	r7, #32
 800098a:	46bd      	mov	sp, r7
 800098c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000990:	b004      	add	sp, #16
 8000992:	4770      	bx	lr
 8000994:	08003870 	.word	0x08003870

08000998 <SetupRetr>:
//Otomatik Yeniden İletim Kurulumu
void SetupRetr(SPI_HandleTypeDef hspix ,uint8_t reg ,uint8_t deg)
{
 8000998:	b084      	sub	sp, #16
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	f107 0c10 	add.w	ip, r7, #16
 80009a4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t Buf[3];
	Buf[0] = reg|0x20;
 80009a8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80009ac:	f043 0320 	orr.w	r3, r3, #32
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	713b      	strb	r3, [r7, #4]
	Buf[1] = deg;
 80009b4:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80009b8:	717b      	strb	r3, [r7, #5]
	PinStatusSetter(DIP_CSN_Pin , 0);
 80009ba:	2100      	movs	r1, #0
 80009bc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80009c0:	f7ff fda6 	bl	8000510 <PinStatusSetter>
	HAL_SPI_Transmit(&hspix, Buf, 2, 100);
 80009c4:	1d39      	adds	r1, r7, #4
 80009c6:	2364      	movs	r3, #100	; 0x64
 80009c8:	2202      	movs	r2, #2
 80009ca:	f107 0010 	add.w	r0, r7, #16
 80009ce:	f002 f8cc 	bl	8002b6a <HAL_SPI_Transmit>
	PinStatusSetter(DIP_CSN_Pin , 1);
 80009d2:	2101      	movs	r1, #1
 80009d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80009d8:	f7ff fd9a 	bl	8000510 <PinStatusSetter>
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009e6:	b004      	add	sp, #16
 80009e8:	4770      	bx	lr

080009ea <SetupRetrRead>:
//Otomatik yeniden iletim durumu
void SetupRetrRead(SPI_HandleTypeDef hspix ,uint8_t reg)
{
 80009ea:	b084      	sub	sp, #16
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	f107 0c10 	add.w	ip, r7, #16
 80009f6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t Buf[2];
	Buf[0] = reg&0x1F;
 80009fa:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80009fe:	f003 031f 	and.w	r3, r3, #31
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	713b      	strb	r3, [r7, #4]
	PinStatusSetter(DIP_CSN_Pin , 0);
 8000a06:	2100      	movs	r1, #0
 8000a08:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a0c:	f7ff fd80 	bl	8000510 <PinStatusSetter>
	HAL_SPI_Transmit(&hspix, &Buf[0], 1, 100);
 8000a10:	1d39      	adds	r1, r7, #4
 8000a12:	2364      	movs	r3, #100	; 0x64
 8000a14:	2201      	movs	r2, #1
 8000a16:	f107 0010 	add.w	r0, r7, #16
 8000a1a:	f002 f8a6 	bl	8002b6a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspix, &Buf[1], 1, 100);
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	1c59      	adds	r1, r3, #1
 8000a22:	2364      	movs	r3, #100	; 0x64
 8000a24:	2201      	movs	r2, #1
 8000a26:	f107 0010 	add.w	r0, r7, #16
 8000a2a:	f002 f9da 	bl	8002de2 <HAL_SPI_Receive>
	PinStatusSetter(DIP_CSN_Pin , 1);
 8000a2e:	2101      	movs	r1, #1
 8000a30:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a34:	f7ff fd6c 	bl	8000510 <PinStatusSetter>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a42:	b004      	add	sp, #16
 8000a44:	4770      	bx	lr

08000a46 <EN_AA_Register>:
//Otomatik bilgilendimeyi aktif ediyoruz.
void EN_AA_Register(SPI_HandleTypeDef hspix,uint8_t reg ,uint8_t deg)
{
 8000a46:	b084      	sub	sp, #16
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	f107 0c10 	add.w	ip, r7, #16
 8000a52:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t Buf[3];
	Buf[0] =  reg|0x20;
 8000a56:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000a5a:	f043 0320 	orr.w	r3, r3, #32
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	713b      	strb	r3, [r7, #4]
	Buf[1] = deg;
 8000a62:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000a66:	717b      	strb	r3, [r7, #5]
	PinStatusSetter(DIP_CSN_Pin ,0);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a6e:	f7ff fd4f 	bl	8000510 <PinStatusSetter>
	HAL_SPI_Transmit(&hspix, Buf, 2, 100);
 8000a72:	1d39      	adds	r1, r7, #4
 8000a74:	2364      	movs	r3, #100	; 0x64
 8000a76:	2202      	movs	r2, #2
 8000a78:	f107 0010 	add.w	r0, r7, #16
 8000a7c:	f002 f875 	bl	8002b6a <HAL_SPI_Transmit>
	PinStatusSetter(DIP_CSN_Pin ,1);
 8000a80:	2101      	movs	r1, #1
 8000a82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a86:	f7ff fd43 	bl	8000510 <PinStatusSetter>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a94:	b004      	add	sp, #16
 8000a96:	4770      	bx	lr

08000a98 <EN_AA_RegisterRead>:
//Otomatik bilgilendirme registerini okuoyoruz.
void EN_AA_RegisterRead(SPI_HandleTypeDef hspix,uint8_t reg)
{
 8000a98:	b084      	sub	sp, #16
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	f107 0c10 	add.w	ip, r7, #16
 8000aa4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t Buf[2];
	Buf[0] = reg&0x1F;
 8000aa8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000aac:	f003 031f 	and.w	r3, r3, #31
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	713b      	strb	r3, [r7, #4]
	PinStatusSetter(DIP_CSN_Pin , 0);
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000aba:	f7ff fd29 	bl	8000510 <PinStatusSetter>
	HAL_SPI_Transmit(&hspix, &Buf[0], 1, 100);
 8000abe:	1d39      	adds	r1, r7, #4
 8000ac0:	2364      	movs	r3, #100	; 0x64
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f107 0010 	add.w	r0, r7, #16
 8000ac8:	f002 f84f 	bl	8002b6a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspix, &Buf[1], 1, 100);
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	1c59      	adds	r1, r3, #1
 8000ad0:	2364      	movs	r3, #100	; 0x64
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f107 0010 	add.w	r0, r7, #16
 8000ad8:	f002 f983 	bl	8002de2 <HAL_SPI_Receive>
	PinStatusSetter(DIP_CSN_Pin , 1);
 8000adc:	2101      	movs	r1, #1
 8000ade:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ae2:	f7ff fd15 	bl	8000510 <PinStatusSetter>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <En_RxAddressSpi1>:
//SPI1 ye bağlı Nrf24l01 lerin Rx Adreslerini enable ediyoruz.
void En_RxAddressSpi1(SPI_HandleTypeDef hspix,uint8_t reg,uint8_t value)
{
 8000af4:	b084      	sub	sp, #16
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	f107 0c10 	add.w	ip, r7, #16
 8000b00:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiBuf[3];
	//Put CSN low
	PinStatusSetter(DIP_CSN_Pin , 0);
 8000b04:	2100      	movs	r1, #0
 8000b06:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b0a:	f7ff fd01 	bl	8000510 <PinStatusSetter>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000b0e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000b12:	f043 0320 	orr.w	r3, r3, #32
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	713b      	strb	r3, [r7, #4]
	spiBuf[1] = value;
 8000b1a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000b1e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&hspix, spiBuf, 2, 100);
 8000b20:	1d39      	adds	r1, r7, #4
 8000b22:	2364      	movs	r3, #100	; 0x64
 8000b24:	2202      	movs	r2, #2
 8000b26:	f107 0010 	add.w	r0, r7, #16
 8000b2a:	f002 f81e 	bl	8002b6a <HAL_SPI_Transmit>
	//Bring CSN high
	PinStatusSetter(DIP_CSN_Pin ,1);
 8000b2e:	2101      	movs	r1, #1
 8000b30:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b34:	f7ff fcec 	bl	8000510 <PinStatusSetter>
	spiBuf[1] = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	717b      	strb	r3, [r7, #5]
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b46:	b004      	add	sp, #16
 8000b48:	4770      	bx	lr

08000b4a <En_RxReadAddressSpi1>:
//SPI1 ye bağlı Nrf24l01 lerin Rx Adreslerini okuyoruz.
uint8_t En_RxReadAddressSpi1(SPI_HandleTypeDef hspix,uint8_t reg)
{
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	f107 0c10 	add.w	ip, r7, #16
 8000b56:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiBuf[3];
	uint8_t retData =0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	71fb      	strb	r3, [r7, #7]
	//Put CSN low
	PinStatusSetter(DIP_CSN_Pin , 0);
 8000b5e:	2100      	movs	r1, #0
 8000b60:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b64:	f7ff fcd4 	bl	8000510 <PinStatusSetter>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000b68:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000b6c:	f003 031f 	and.w	r3, r3, #31
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	713b      	strb	r3, [r7, #4]
	HAL_SPI_Transmit(&hspix, spiBuf, 1, 100);
 8000b74:	1d39      	adds	r1, r7, #4
 8000b76:	2364      	movs	r3, #100	; 0x64
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f107 0010 	add.w	r0, r7, #16
 8000b7e:	f001 fff4 	bl	8002b6a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&hspix, &spiBuf[1], 1, 100);
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	1c59      	adds	r1, r3, #1
 8000b86:	2364      	movs	r3, #100	; 0x64
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f107 0010 	add.w	r0, r7, #16
 8000b8e:	f002 f928 	bl	8002de2 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000b92:	797b      	ldrb	r3, [r7, #5]
 8000b94:	71fb      	strb	r3, [r7, #7]
	//Bring CSN high
	PinStatusSetter(DIP_CSN_Pin , 1);
 8000b96:	2101      	movs	r1, #1
 8000b98:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b9c:	f7ff fcb8 	bl	8000510 <PinStatusSetter>
	spiBuf[1] =0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	717b      	strb	r3, [r7, #5]
	return retData;
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bb0:	b004      	add	sp, #16
 8000bb2:	4770      	bx	lr

08000bb4 <RxAdrP0AckRead>:
//Ack değerini okuyoruz.
void RxAdrP0AckRead(SPI_HandleTypeDef hspix)
{
 8000bb4:	b084      	sub	sp, #16
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	f107 0c18 	add.w	ip, r7, #24
 8000bc0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t ACK_ReadData[10];
	PinStatusSetter(SMD_CE_Pin, 1);
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bca:	f7ff fca1 	bl	8000510 <PinStatusSetter>
	NRF24_DelayMicroSeconds(150);
 8000bce:	2096      	movs	r0, #150	; 0x96
 8000bd0:	f7ff fc7c 	bl	80004cc <NRF24_DelayMicroSeconds>
	uint8_t AckRead = CMD_R_RX_PAYLOAD;
 8000bd4:	2361      	movs	r3, #97	; 0x61
 8000bd6:	70fb      	strb	r3, [r7, #3]

	PinStatusSetter(DIP_CSN_Pin , 0);
 8000bd8:	2100      	movs	r1, #0
 8000bda:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000bde:	f7ff fc97 	bl	8000510 <PinStatusSetter>
	HAL_SPI_Transmit(&hspix, &AckRead, 1, 100);
 8000be2:	1cf9      	adds	r1, r7, #3
 8000be4:	2364      	movs	r3, #100	; 0x64
 8000be6:	2201      	movs	r2, #1
 8000be8:	f107 0018 	add.w	r0, r7, #24
 8000bec:	f001 ffbd 	bl	8002b6a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspix, ACK_ReadData, 10, 100);
 8000bf0:	1d39      	adds	r1, r7, #4
 8000bf2:	2364      	movs	r3, #100	; 0x64
 8000bf4:	220a      	movs	r2, #10
 8000bf6:	f107 0018 	add.w	r0, r7, #24
 8000bfa:	f002 f8f2 	bl	8002de2 <HAL_SPI_Receive>
	PinStatusSetter(DIP_CSN_Pin , 1);
 8000bfe:	2101      	movs	r1, #1
 8000c00:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c04:	f7ff fc84 	bl	8000510 <PinStatusSetter>
	PinStatusSetter(SMD_CE_Pin, 0);
 8000c08:	2100      	movs	r1, #0
 8000c0a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c0e:	f7ff fc7f 	bl	8000510 <PinStatusSetter>

}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c1c:	b004      	add	sp, #16
 8000c1e:	4770      	bx	lr

08000c20 <Nrf24InitTx>:
//Tx İnitializasyon
void Nrf24InitTx()
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b095      	sub	sp, #84	; 0x54
 8000c24:	af14      	add	r7, sp, #80	; 0x50
	Nrf24WriteRegisterSpi1(hspi1,0x00,0x0A);
 8000c26:	4c7b      	ldr	r4, [pc, #492]	; (8000e14 <Nrf24InitTx+0x1f4>)
 8000c28:	230a      	movs	r3, #10
 8000c2a:	9313      	str	r3, [sp, #76]	; 0x4c
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	9312      	str	r3, [sp, #72]	; 0x48
 8000c30:	4668      	mov	r0, sp
 8000c32:	f104 0310 	add.w	r3, r4, #16
 8000c36:	2248      	movs	r2, #72	; 0x48
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f002 fdf7 	bl	800382c <memcpy>
 8000c3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c42:	f7ff fcac 	bl	800059e <Nrf24WriteRegisterSpi1>
	Nrf24ReadRegisterSpi1(hspi1,0x00);
 8000c46:	4c73      	ldr	r4, [pc, #460]	; (8000e14 <Nrf24InitTx+0x1f4>)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	9312      	str	r3, [sp, #72]	; 0x48
 8000c4c:	4668      	mov	r0, sp
 8000c4e:	f104 0310 	add.w	r3, r4, #16
 8000c52:	2248      	movs	r2, #72	; 0x48
 8000c54:	4619      	mov	r1, r3
 8000c56:	f002 fde9 	bl	800382c <memcpy>
 8000c5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c5e:	f7ff fc6b 	bl	8000538 <Nrf24ReadRegisterSpi1>
	TxAddrSpi1(hspi1 ,10 ,5);
 8000c62:	4c6c      	ldr	r4, [pc, #432]	; (8000e14 <Nrf24InitTx+0x1f4>)
 8000c64:	2305      	movs	r3, #5
 8000c66:	9313      	str	r3, [sp, #76]	; 0x4c
 8000c68:	230a      	movs	r3, #10
 8000c6a:	9312      	str	r3, [sp, #72]	; 0x48
 8000c6c:	4668      	mov	r0, sp
 8000c6e:	f104 0310 	add.w	r3, r4, #16
 8000c72:	2248      	movs	r2, #72	; 0x48
 8000c74:	4619      	mov	r1, r3
 8000c76:	f002 fdd9 	bl	800382c <memcpy>
 8000c7a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c7e:	f7ff fce9 	bl	8000654 <TxAddrSpi1>
	TxAddrReadSpi1(hspi1, 10 ,5);
 8000c82:	4c64      	ldr	r4, [pc, #400]	; (8000e14 <Nrf24InitTx+0x1f4>)
 8000c84:	2305      	movs	r3, #5
 8000c86:	9313      	str	r3, [sp, #76]	; 0x4c
 8000c88:	230a      	movs	r3, #10
 8000c8a:	9312      	str	r3, [sp, #72]	; 0x48
 8000c8c:	4668      	mov	r0, sp
 8000c8e:	f104 0310 	add.w	r3, r4, #16
 8000c92:	2248      	movs	r2, #72	; 0x48
 8000c94:	4619      	mov	r1, r3
 8000c96:	f002 fdc9 	bl	800382c <memcpy>
 8000c9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c9e:	f7ff fca9 	bl	80005f4 <TxAddrReadSpi1>
	RX_ADDR_P0_Write(hspi1,0x0A,5);
 8000ca2:	4c5c      	ldr	r4, [pc, #368]	; (8000e14 <Nrf24InitTx+0x1f4>)
 8000ca4:	2305      	movs	r3, #5
 8000ca6:	9313      	str	r3, [sp, #76]	; 0x4c
 8000ca8:	230a      	movs	r3, #10
 8000caa:	9312      	str	r3, [sp, #72]	; 0x48
 8000cac:	4668      	mov	r0, sp
 8000cae:	f104 0310 	add.w	r3, r4, #16
 8000cb2:	2248      	movs	r2, #72	; 0x48
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f002 fdb9 	bl	800382c <memcpy>
 8000cba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cbe:	f7ff fd03 	bl	80006c8 <RX_ADDR_P0_Write>
	RX_ADDR_P0_Read(hspi1 ,0x0A);
 8000cc2:	4c54      	ldr	r4, [pc, #336]	; (8000e14 <Nrf24InitTx+0x1f4>)
 8000cc4:	230a      	movs	r3, #10
 8000cc6:	9312      	str	r3, [sp, #72]	; 0x48
 8000cc8:	4668      	mov	r0, sp
 8000cca:	f104 0310 	add.w	r3, r4, #16
 8000cce:	2248      	movs	r2, #72	; 0x48
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f002 fdab 	bl	800382c <memcpy>
 8000cd6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cda:	f7ff fd2f 	bl	800073c <RX_ADDR_P0_Read>
	EN_AA_Register(hspi1,0x01,0x3F);
 8000cde:	4c4d      	ldr	r4, [pc, #308]	; (8000e14 <Nrf24InitTx+0x1f4>)
 8000ce0:	233f      	movs	r3, #63	; 0x3f
 8000ce2:	9313      	str	r3, [sp, #76]	; 0x4c
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	9312      	str	r3, [sp, #72]	; 0x48
 8000ce8:	4668      	mov	r0, sp
 8000cea:	f104 0310 	add.w	r3, r4, #16
 8000cee:	2248      	movs	r2, #72	; 0x48
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f002 fd9b 	bl	800382c <memcpy>
 8000cf6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cfa:	f7ff fea4 	bl	8000a46 <EN_AA_Register>
	EN_AA_RegisterRead(hspi1, 0x01);
 8000cfe:	4c45      	ldr	r4, [pc, #276]	; (8000e14 <Nrf24InitTx+0x1f4>)
 8000d00:	2301      	movs	r3, #1
 8000d02:	9312      	str	r3, [sp, #72]	; 0x48
 8000d04:	4668      	mov	r0, sp
 8000d06:	f104 0310 	add.w	r3, r4, #16
 8000d0a:	2248      	movs	r2, #72	; 0x48
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f002 fd8d 	bl	800382c <memcpy>
 8000d12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d16:	f7ff febf 	bl	8000a98 <EN_AA_RegisterRead>
	En_RxAddressSpi1(hspi1, 0x02, 0x3F);
 8000d1a:	4c3e      	ldr	r4, [pc, #248]	; (8000e14 <Nrf24InitTx+0x1f4>)
 8000d1c:	233f      	movs	r3, #63	; 0x3f
 8000d1e:	9313      	str	r3, [sp, #76]	; 0x4c
 8000d20:	2302      	movs	r3, #2
 8000d22:	9312      	str	r3, [sp, #72]	; 0x48
 8000d24:	4668      	mov	r0, sp
 8000d26:	f104 0310 	add.w	r3, r4, #16
 8000d2a:	2248      	movs	r2, #72	; 0x48
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f002 fd7d 	bl	800382c <memcpy>
 8000d32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d36:	f7ff fedd 	bl	8000af4 <En_RxAddressSpi1>
	En_RxReadAddressSpi1(hspi1, 0x02);
 8000d3a:	4c36      	ldr	r4, [pc, #216]	; (8000e14 <Nrf24InitTx+0x1f4>)
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	9312      	str	r3, [sp, #72]	; 0x48
 8000d40:	4668      	mov	r0, sp
 8000d42:	f104 0310 	add.w	r3, r4, #16
 8000d46:	2248      	movs	r2, #72	; 0x48
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f002 fd6f 	bl	800382c <memcpy>
 8000d4e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d52:	f7ff fefa 	bl	8000b4a <En_RxReadAddressSpi1>
	SetupRetr(hspi1 ,0x04 ,0x00);
 8000d56:	4c2f      	ldr	r4, [pc, #188]	; (8000e14 <Nrf24InitTx+0x1f4>)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	9313      	str	r3, [sp, #76]	; 0x4c
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	9312      	str	r3, [sp, #72]	; 0x48
 8000d60:	4668      	mov	r0, sp
 8000d62:	f104 0310 	add.w	r3, r4, #16
 8000d66:	2248      	movs	r2, #72	; 0x48
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f002 fd5f 	bl	800382c <memcpy>
 8000d6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d72:	f7ff fe11 	bl	8000998 <SetupRetr>
	SetupRetrRead(hspi1 ,0x04);
 8000d76:	4c27      	ldr	r4, [pc, #156]	; (8000e14 <Nrf24InitTx+0x1f4>)
 8000d78:	2304      	movs	r3, #4
 8000d7a:	9312      	str	r3, [sp, #72]	; 0x48
 8000d7c:	4668      	mov	r0, sp
 8000d7e:	f104 0310 	add.w	r3, r4, #16
 8000d82:	2248      	movs	r2, #72	; 0x48
 8000d84:	4619      	mov	r1, r3
 8000d86:	f002 fd51 	bl	800382c <memcpy>
 8000d8a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d8e:	f7ff fe2c 	bl	80009ea <SetupRetrRead>
	RfSetupSp1(hspi1, 0x06, 0x0E);
 8000d92:	4c20      	ldr	r4, [pc, #128]	; (8000e14 <Nrf24InitTx+0x1f4>)
 8000d94:	230e      	movs	r3, #14
 8000d96:	9313      	str	r3, [sp, #76]	; 0x4c
 8000d98:	2306      	movs	r3, #6
 8000d9a:	9312      	str	r3, [sp, #72]	; 0x48
 8000d9c:	4668      	mov	r0, sp
 8000d9e:	f104 0310 	add.w	r3, r4, #16
 8000da2:	2248      	movs	r2, #72	; 0x48
 8000da4:	4619      	mov	r1, r3
 8000da6:	f002 fd41 	bl	800382c <memcpy>
 8000daa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dae:	f7ff fcf3 	bl	8000798 <RfSetupSp1>
	RfSetupReadSp1(hspi1, 0x06);
 8000db2:	4c18      	ldr	r4, [pc, #96]	; (8000e14 <Nrf24InitTx+0x1f4>)
 8000db4:	2306      	movs	r3, #6
 8000db6:	9312      	str	r3, [sp, #72]	; 0x48
 8000db8:	4668      	mov	r0, sp
 8000dba:	f104 0310 	add.w	r3, r4, #16
 8000dbe:	2248      	movs	r2, #72	; 0x48
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f002 fd33 	bl	800382c <memcpy>
 8000dc6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dca:	f7ff fd10 	bl	80007ee <RfSetupReadSp1>
	RfChSpi1(hspi1, 0x05, 0x02);
 8000dce:	4c11      	ldr	r4, [pc, #68]	; (8000e14 <Nrf24InitTx+0x1f4>)
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	9313      	str	r3, [sp, #76]	; 0x4c
 8000dd4:	2305      	movs	r3, #5
 8000dd6:	9312      	str	r3, [sp, #72]	; 0x48
 8000dd8:	4668      	mov	r0, sp
 8000dda:	f104 0310 	add.w	r3, r4, #16
 8000dde:	2248      	movs	r2, #72	; 0x48
 8000de0:	4619      	mov	r1, r3
 8000de2:	f002 fd23 	bl	800382c <memcpy>
 8000de6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dea:	f7ff fd35 	bl	8000858 <RfChSpi1>
	RfChReadSpi1(hspi1, 0x05);
 8000dee:	4c09      	ldr	r4, [pc, #36]	; (8000e14 <Nrf24InitTx+0x1f4>)
 8000df0:	2305      	movs	r3, #5
 8000df2:	9312      	str	r3, [sp, #72]	; 0x48
 8000df4:	4668      	mov	r0, sp
 8000df6:	f104 0310 	add.w	r3, r4, #16
 8000dfa:	2248      	movs	r2, #72	; 0x48
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f002 fd15 	bl	800382c <memcpy>
 8000e02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e06:	f7ff fd52 	bl	80008ae <RfChReadSpi1>

}
 8000e0a:	bf00      	nop
 8000e0c:	3704      	adds	r7, #4
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd90      	pop	{r4, r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000194 	.word	0x20000194

08000e18 <Nrf24PrimPowerRegisterSpi2>:
//Prim ve power pinlerini ayarlıyoruz.
void Nrf24PrimPowerRegisterSpi2(SPI_HandleTypeDef hspix,uint8_t reg ,uint8_t deg)
{
 8000e18:	b084      	sub	sp, #16
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	f107 0c10 	add.w	ip, r7, #16
 8000e24:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t Buf[3];
	Buf[0] = reg|20;
 8000e28:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000e2c:	f043 0314 	orr.w	r3, r3, #20
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	713b      	strb	r3, [r7, #4]
	Buf[1] = deg;
 8000e34:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000e38:	717b      	strb	r3, [r7, #5]
	PinStatusSetter(SMD_CSN_Pin, 0);
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2008      	movs	r0, #8
 8000e3e:	f7ff fb67 	bl	8000510 <PinStatusSetter>
	HAL_SPI_Transmit(&hspix, Buf, 2, 100);
 8000e42:	1d39      	adds	r1, r7, #4
 8000e44:	2364      	movs	r3, #100	; 0x64
 8000e46:	2202      	movs	r2, #2
 8000e48:	f107 0010 	add.w	r0, r7, #16
 8000e4c:	f001 fe8d 	bl	8002b6a <HAL_SPI_Transmit>
	PinStatusSetter(SMD_CSN_Pin, 1);
 8000e50:	2101      	movs	r1, #1
 8000e52:	2008      	movs	r0, #8
 8000e54:	f7ff fb5c 	bl	8000510 <PinStatusSetter>
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e62:	b004      	add	sp, #16
 8000e64:	4770      	bx	lr

08000e66 <Nrf24PrinPowerRegisterReadSpi2>:
//Prim ve power bitlerini okuyoruz.
uint8_t Nrf24PrinPowerRegisterReadSpi2(SPI_HandleTypeDef hspix,uint8_t reg)
{
 8000e66:	b084      	sub	sp, #16
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	f107 0c10 	add.w	ip, r7, #16
 8000e72:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t regdata;
	uint8_t Buf[2];
	Buf[0] = reg&0x1F;
 8000e76:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000e7a:	f003 031f 	and.w	r3, r3, #31
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	713b      	strb	r3, [r7, #4]

	PinStatusSetter(SMD_CSN_Pin, 0);
 8000e82:	2100      	movs	r1, #0
 8000e84:	2008      	movs	r0, #8
 8000e86:	f7ff fb43 	bl	8000510 <PinStatusSetter>
	HAL_SPI_Transmit(&hspix, &Buf[0], 1, 100);
 8000e8a:	1d39      	adds	r1, r7, #4
 8000e8c:	2364      	movs	r3, #100	; 0x64
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f107 0010 	add.w	r0, r7, #16
 8000e94:	f001 fe69 	bl	8002b6a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspix, &Buf[1], 1, 100);
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	1c59      	adds	r1, r3, #1
 8000e9c:	2364      	movs	r3, #100	; 0x64
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f107 0010 	add.w	r0, r7, #16
 8000ea4:	f001 ff9d 	bl	8002de2 <HAL_SPI_Receive>
	regdata =Buf[1];
 8000ea8:	797b      	ldrb	r3, [r7, #5]
 8000eaa:	71fb      	strb	r3, [r7, #7]
	PinStatusSetter(SMD_CSN_Pin, 1);
 8000eac:	2101      	movs	r1, #1
 8000eae:	2008      	movs	r0, #8
 8000eb0:	f7ff fb2e 	bl	8000510 <PinStatusSetter>

	return regdata;
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ec0:	b004      	add	sp, #16
 8000ec2:	4770      	bx	lr

08000ec4 <NRF24_EN_RXADDR_SMD>:
//SPI2 ye bağlı Nrf24l01 lerin Rx Adreslerini enable ediyoruz.
void NRF24_EN_RXADDR_SMD(SPI_HandleTypeDef hspix,uint8_t reg,uint8_t deg)
{
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	f107 0c10 	add.w	ip, r7, #16
 8000ed0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t Buf[3];
	Buf[0] = reg|20;
 8000ed4:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000ed8:	f043 0314 	orr.w	r3, r3, #20
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	713b      	strb	r3, [r7, #4]
	Buf[1] = deg;
 8000ee0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000ee4:	717b      	strb	r3, [r7, #5]
	PinStatusSetter(SMD_CSN_Pin, 0);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2008      	movs	r0, #8
 8000eea:	f7ff fb11 	bl	8000510 <PinStatusSetter>
	HAL_SPI_Transmit(&hspix, Buf, 2, 100);
 8000eee:	1d39      	adds	r1, r7, #4
 8000ef0:	2364      	movs	r3, #100	; 0x64
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	f107 0010 	add.w	r0, r7, #16
 8000ef8:	f001 fe37 	bl	8002b6a <HAL_SPI_Transmit>
	PinStatusSetter(SMD_CSN_Pin, 1);
 8000efc:	2101      	movs	r1, #1
 8000efe:	2008      	movs	r0, #8
 8000f00:	f7ff fb06 	bl	8000510 <PinStatusSetter>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f0e:	b004      	add	sp, #16
 8000f10:	4770      	bx	lr

08000f12 <NRF24_EN_RXADDR_READ_SMD>:
//SPI2 ye bağlı Nrf24l01 lerin Rx Adreslerini okuyoruz.
uint8_t NRF24_EN_RXADDR_READ_SMD(SPI_HandleTypeDef hspix,uint8_t reg)
{
 8000f12:	b084      	sub	sp, #16
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	f107 0c10 	add.w	ip, r7, #16
 8000f1e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t Buf[2];
	Buf[0] = reg&0x1F;
 8000f22:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000f26:	f003 031f 	and.w	r3, r3, #31
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	713b      	strb	r3, [r7, #4]
	uint8_t retdata;

	PinStatusSetter(SMD_CSN_Pin, 0);
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2008      	movs	r0, #8
 8000f32:	f7ff faed 	bl	8000510 <PinStatusSetter>
	HAL_SPI_Transmit(&hspix, &Buf[0], 1, 100);
 8000f36:	1d39      	adds	r1, r7, #4
 8000f38:	2364      	movs	r3, #100	; 0x64
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f107 0010 	add.w	r0, r7, #16
 8000f40:	f001 fe13 	bl	8002b6a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspix, &Buf[1], 1, 100);
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	1c59      	adds	r1, r3, #1
 8000f48:	2364      	movs	r3, #100	; 0x64
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f107 0010 	add.w	r0, r7, #16
 8000f50:	f001 ff47 	bl	8002de2 <HAL_SPI_Receive>
	PinStatusSetter(SMD_CSN_Pin, 1);
 8000f54:	2101      	movs	r1, #1
 8000f56:	2008      	movs	r0, #8
 8000f58:	f7ff fada 	bl	8000510 <PinStatusSetter>
	retdata = Buf[1];
 8000f5c:	797b      	ldrb	r3, [r7, #5]
 8000f5e:	71fb      	strb	r3, [r7, #7]

	return retdata;
 8000f60:	79fb      	ldrb	r3, [r7, #7]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f6c:	b004      	add	sp, #16
 8000f6e:	4770      	bx	lr

08000f70 <EN_AA_Smd>:
//Otomatik bilgilendirme registerini ayarlıyoruz.
void EN_AA_Smd(SPI_HandleTypeDef hspix,uint8_t reg,uint8_t deg)
{
 8000f70:	b084      	sub	sp, #16
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	f107 0c10 	add.w	ip, r7, #16
 8000f7c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t Buf[3];
	Buf[0] = reg|20;
 8000f80:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000f84:	f043 0314 	orr.w	r3, r3, #20
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	713b      	strb	r3, [r7, #4]
	Buf[1] = deg;
 8000f8c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000f90:	717b      	strb	r3, [r7, #5]
	PinStatusSetter(SMD_CSN_Pin, 0);
 8000f92:	2100      	movs	r1, #0
 8000f94:	2008      	movs	r0, #8
 8000f96:	f7ff fabb 	bl	8000510 <PinStatusSetter>
	HAL_SPI_Transmit(&hspix, Buf, 2, 100);
 8000f9a:	1d39      	adds	r1, r7, #4
 8000f9c:	2364      	movs	r3, #100	; 0x64
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	f107 0010 	add.w	r0, r7, #16
 8000fa4:	f001 fde1 	bl	8002b6a <HAL_SPI_Transmit>
	PinStatusSetter(SMD_CSN_Pin, 1);
 8000fa8:	2101      	movs	r1, #1
 8000faa:	2008      	movs	r0, #8
 8000fac:	f7ff fab0 	bl	8000510 <PinStatusSetter>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fba:	b004      	add	sp, #16
 8000fbc:	4770      	bx	lr

08000fbe <EN_AA_ReadSmd>:
//Otomatik bilgilendirme registerini ayarlıyoruz.
void EN_AA_ReadSmd(SPI_HandleTypeDef hspix,uint8_t reg)
{
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	f107 0c10 	add.w	ip, r7, #16
 8000fca:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t Buf[2];
	Buf[0] = reg&0x1F;
 8000fce:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000fd2:	f003 031f 	and.w	r3, r3, #31
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	713b      	strb	r3, [r7, #4]

	PinStatusSetter(SMD_CSN_Pin, 0);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2008      	movs	r0, #8
 8000fde:	f7ff fa97 	bl	8000510 <PinStatusSetter>
	HAL_SPI_Transmit(&hspix, &Buf[0], 1, 100);
 8000fe2:	1d39      	adds	r1, r7, #4
 8000fe4:	2364      	movs	r3, #100	; 0x64
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f107 0010 	add.w	r0, r7, #16
 8000fec:	f001 fdbd 	bl	8002b6a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspix, &Buf[1], 1, 100);
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	1c59      	adds	r1, r3, #1
 8000ff4:	2364      	movs	r3, #100	; 0x64
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f107 0010 	add.w	r0, r7, #16
 8000ffc:	f001 fef1 	bl	8002de2 <HAL_SPI_Receive>
	PinStatusSetter(SMD_CSN_Pin, 1);
 8001000:	2101      	movs	r1, #1
 8001002:	2008      	movs	r0, #8
 8001004:	f7ff fa84 	bl	8000510 <PinStatusSetter>

}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001012:	b004      	add	sp, #16
 8001014:	4770      	bx	lr

08001016 <RxPwP0Spi2>:
//Yük genişliklerini ayarlıyoruz.
void RxPwP0Spi2(SPI_HandleTypeDef hspix,uint8_t reg,uint8_t deg)
{
 8001016:	b084      	sub	sp, #16
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	f107 0c10 	add.w	ip, r7, #16
 8001022:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t Buf[3];
	Buf[0] = reg|20;
 8001026:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800102a:	f043 0314 	orr.w	r3, r3, #20
 800102e:	b2db      	uxtb	r3, r3
 8001030:	713b      	strb	r3, [r7, #4]
	Buf[1] = deg;
 8001032:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001036:	717b      	strb	r3, [r7, #5]
	PinStatusSetter(SMD_CSN_Pin, 0);
 8001038:	2100      	movs	r1, #0
 800103a:	2008      	movs	r0, #8
 800103c:	f7ff fa68 	bl	8000510 <PinStatusSetter>
	HAL_SPI_Transmit(&hspix, Buf, 2, 100);
 8001040:	1d39      	adds	r1, r7, #4
 8001042:	2364      	movs	r3, #100	; 0x64
 8001044:	2202      	movs	r2, #2
 8001046:	f107 0010 	add.w	r0, r7, #16
 800104a:	f001 fd8e 	bl	8002b6a <HAL_SPI_Transmit>
	PinStatusSetter(SMD_CSN_Pin, 1);
 800104e:	2101      	movs	r1, #1
 8001050:	2008      	movs	r0, #8
 8001052:	f7ff fa5d 	bl	8000510 <PinStatusSetter>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001060:	b004      	add	sp, #16
 8001062:	4770      	bx	lr

08001064 <RwPwP0ReadSpi2>:
//Yük genişligini ayarladıktan sonra test ediyoruz.
uint8_t RwPwP0ReadSpi2(SPI_HandleTypeDef hspix,uint8_t reg)
{
 8001064:	b084      	sub	sp, #16
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	f107 0c10 	add.w	ip, r7, #16
 8001070:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t Buf[2];
	Buf[0] = reg&0x1F;
 8001074:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001078:	f003 031f 	and.w	r3, r3, #31
 800107c:	b2db      	uxtb	r3, r3
 800107e:	713b      	strb	r3, [r7, #4]
	uint8_t retdata;

	PinStatusSetter(SMD_CSN_Pin, 0);
 8001080:	2100      	movs	r1, #0
 8001082:	2008      	movs	r0, #8
 8001084:	f7ff fa44 	bl	8000510 <PinStatusSetter>
	HAL_SPI_Transmit(&hspix, &Buf[0], 1, 100);
 8001088:	1d39      	adds	r1, r7, #4
 800108a:	2364      	movs	r3, #100	; 0x64
 800108c:	2201      	movs	r2, #1
 800108e:	f107 0010 	add.w	r0, r7, #16
 8001092:	f001 fd6a 	bl	8002b6a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspix, &Buf[1], 1, 100);
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	1c59      	adds	r1, r3, #1
 800109a:	2364      	movs	r3, #100	; 0x64
 800109c:	2201      	movs	r2, #1
 800109e:	f107 0010 	add.w	r0, r7, #16
 80010a2:	f001 fe9e 	bl	8002de2 <HAL_SPI_Receive>
	PinStatusSetter(SMD_CSN_Pin, 1);
 80010a6:	2101      	movs	r1, #1
 80010a8:	2008      	movs	r0, #8
 80010aa:	f7ff fa31 	bl	8000510 <PinStatusSetter>
	retdata = Buf[1];
 80010ae:	797b      	ldrb	r3, [r7, #5]
 80010b0:	71fb      	strb	r3, [r7, #7]

	return retdata;
 80010b2:	79fb      	ldrb	r3, [r7, #7]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010be:	b004      	add	sp, #16
 80010c0:	4770      	bx	lr

080010c2 <RX_ADDR_P5_SMD>:
//Otomatik bilgilendirme için Tx cihazının Rx pipe 5'i ayarlıyoruz.
void RX_ADDR_P5_SMD(SPI_HandleTypeDef hspix ,uint8_t reg  ,uint8_t len)
{
 80010c2:	b084      	sub	sp, #16
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	f107 0c18 	add.w	ip, r7, #24
 80010ce:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t Buf[1];

	uint8_t RX_ADDR_P5_VALUE[5];
	RX_ADDR_P5_VALUE[0] = 0x11,RX_ADDR_P5_VALUE[1] =0x11,RX_ADDR_P5_VALUE[2] =0x11,
 80010d2:	2311      	movs	r3, #17
 80010d4:	713b      	strb	r3, [r7, #4]
 80010d6:	2311      	movs	r3, #17
 80010d8:	717b      	strb	r3, [r7, #5]
 80010da:	2311      	movs	r3, #17
 80010dc:	71bb      	strb	r3, [r7, #6]
			RX_ADDR_P5_VALUE[3] =0x11,RX_ADDR_P5_VALUE[4] =0x11;
 80010de:	2311      	movs	r3, #17
 80010e0:	71fb      	strb	r3, [r7, #7]
 80010e2:	2311      	movs	r3, #17
 80010e4:	723b      	strb	r3, [r7, #8]
	Buf[0] = reg|0x20;
 80010e6:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80010ea:	f043 0320 	orr.w	r3, r3, #32
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	733b      	strb	r3, [r7, #12]

	PinStatusSetter(SMD_CSN_Pin, 0);
 80010f2:	2100      	movs	r1, #0
 80010f4:	2008      	movs	r0, #8
 80010f6:	f7ff fa0b 	bl	8000510 <PinStatusSetter>
	HAL_SPI_Transmit(&hspix, Buf, 1, 100);
 80010fa:	f107 010c 	add.w	r1, r7, #12
 80010fe:	2364      	movs	r3, #100	; 0x64
 8001100:	2201      	movs	r2, #1
 8001102:	f107 0018 	add.w	r0, r7, #24
 8001106:	f001 fd30 	bl	8002b6a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspix, (uint8_t*)RX_ADDR_P5_VALUE, len, 100);
 800110a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800110e:	b29a      	uxth	r2, r3
 8001110:	1d39      	adds	r1, r7, #4
 8001112:	2364      	movs	r3, #100	; 0x64
 8001114:	f107 0018 	add.w	r0, r7, #24
 8001118:	f001 fd27 	bl	8002b6a <HAL_SPI_Transmit>
	PinStatusSetter(SMD_CSN_Pin, 1);
 800111c:	2101      	movs	r1, #1
 800111e:	2008      	movs	r0, #8
 8001120:	f7ff f9f6 	bl	8000510 <PinStatusSetter>
}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800112e:	b004      	add	sp, #16
 8001130:	4770      	bx	lr

08001132 <RX_ADDR_P5_READ_SMD>:
//Otomatik bilgilendirme için Tx cihazının Rx pipe 5'i okuyoruz.
void RX_ADDR_P5_READ_SMD(SPI_HandleTypeDef hspix ,uint8_t reg)
{
 8001132:	b084      	sub	sp, #16
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	f107 0c18 	add.w	ip, r7, #24
 800113e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t Buf[3];
	Buf[0] = reg&0x1F;
 8001142:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001146:	f003 031f 	and.w	r3, r3, #31
 800114a:	b2db      	uxtb	r3, r3
 800114c:	733b      	strb	r3, [r7, #12]
	uint8_t retbuf[5];

	PinStatusSetter(SMD_CSN_Pin, 0);
 800114e:	2100      	movs	r1, #0
 8001150:	2008      	movs	r0, #8
 8001152:	f7ff f9dd 	bl	8000510 <PinStatusSetter>
	HAL_SPI_Transmit(&hspix, Buf, 1, 100);
 8001156:	f107 010c 	add.w	r1, r7, #12
 800115a:	2364      	movs	r3, #100	; 0x64
 800115c:	2201      	movs	r2, #1
 800115e:	f107 0018 	add.w	r0, r7, #24
 8001162:	f001 fd02 	bl	8002b6a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspix, retbuf, 5, 100);
 8001166:	1d39      	adds	r1, r7, #4
 8001168:	2364      	movs	r3, #100	; 0x64
 800116a:	2205      	movs	r2, #5
 800116c:	f107 0018 	add.w	r0, r7, #24
 8001170:	f001 fe37 	bl	8002de2 <HAL_SPI_Receive>
	PinStatusSetter(SMD_CSN_Pin, 1);
 8001174:	2101      	movs	r1, #1
 8001176:	2008      	movs	r0, #8
 8001178:	f7ff f9ca 	bl	8000510 <PinStatusSetter>
}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001186:	b004      	add	sp, #16
 8001188:	4770      	bx	lr

0800118a <RfChSpi2>:
//Spi2 ye bağlı nRF24L01'in frekans ayarlarını yapıyoruz.
void RfChSpi2(SPI_HandleTypeDef hspix,uint8_t reg,uint8_t value)
{
 800118a:	b084      	sub	sp, #16
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	f107 0c10 	add.w	ip, r7, #16
 8001196:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiBuf[3];
	//Put CSN low
	PinStatusSetter(SMD_CSN_Pin , 0);
 800119a:	2100      	movs	r1, #0
 800119c:	2008      	movs	r0, #8
 800119e:	f7ff f9b7 	bl	8000510 <PinStatusSetter>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80011a2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80011a6:	f043 0320 	orr.w	r3, r3, #32
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	713b      	strb	r3, [r7, #4]
	spiBuf[1] = value;
 80011ae:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80011b2:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&hspix, spiBuf, 2, 100);
 80011b4:	1d39      	adds	r1, r7, #4
 80011b6:	2364      	movs	r3, #100	; 0x64
 80011b8:	2202      	movs	r2, #2
 80011ba:	f107 0010 	add.w	r0, r7, #16
 80011be:	f001 fcd4 	bl	8002b6a <HAL_SPI_Transmit>
	//Bring CSN high
	PinStatusSetter(SMD_CSN_Pin ,1);
 80011c2:	2101      	movs	r1, #1
 80011c4:	2008      	movs	r0, #8
 80011c6:	f7ff f9a3 	bl	8000510 <PinStatusSetter>
	spiBuf[1] = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	717b      	strb	r3, [r7, #5]
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011d8:	b004      	add	sp, #16
 80011da:	4770      	bx	lr

080011dc <RfChReadSpi2>:
//Spi2 ye bağlı nRF24L01'in frekans ayarlarını okuyoruz.
uint8_t RfChReadSpi2(SPI_HandleTypeDef hspix,uint8_t reg)
{
 80011dc:	b084      	sub	sp, #16
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	f107 0c10 	add.w	ip, r7, #16
 80011e8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiBu[3];
	uint8_t retData = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	71fb      	strb	r3, [r7, #7]
	//Put CSN low
	PinStatusSetter(SMD_CSN_Pin , 0);
 80011f0:	2100      	movs	r1, #0
 80011f2:	2008      	movs	r0, #8
 80011f4:	f7ff f98c 	bl	8000510 <PinStatusSetter>
	//Transmit register address
	spiBu[0] = reg&0x1F;
 80011f8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	b2db      	uxtb	r3, r3
 8001202:	713b      	strb	r3, [r7, #4]
	HAL_SPI_Transmit(&hspix, spiBu, 1, 100);
 8001204:	1d39      	adds	r1, r7, #4
 8001206:	2364      	movs	r3, #100	; 0x64
 8001208:	2201      	movs	r2, #1
 800120a:	f107 0010 	add.w	r0, r7, #16
 800120e:	f001 fcac 	bl	8002b6a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&hspix, &spiBu[1], 1, 100);
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	1c59      	adds	r1, r3, #1
 8001216:	2364      	movs	r3, #100	; 0x64
 8001218:	2201      	movs	r2, #1
 800121a:	f107 0010 	add.w	r0, r7, #16
 800121e:	f001 fde0 	bl	8002de2 <HAL_SPI_Receive>
	retData = spiBu[1];
 8001222:	797b      	ldrb	r3, [r7, #5]
 8001224:	71fb      	strb	r3, [r7, #7]
	//Bring CSN high
	PinStatusSetter(SMD_CSN_Pin , 1);
 8001226:	2101      	movs	r1, #1
 8001228:	2008      	movs	r0, #8
 800122a:	f7ff f971 	bl	8000510 <PinStatusSetter>
	spiBu[1] =0;
 800122e:	2300      	movs	r3, #0
 8001230:	717b      	strb	r3, [r7, #5]
	return retData;
 8001232:	79fb      	ldrb	r3, [r7, #7]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800123e:	b004      	add	sp, #16
 8001240:	4770      	bx	lr

08001242 <RfSetupSp2>:
//SPI2'ye bağlı nRF24L01'in data rate ve çıkış gücünü ayarlıyoruz.
void RfSetupSp2(SPI_HandleTypeDef hspix,uint8_t reg,uint8_t value)
{
 8001242:	b084      	sub	sp, #16
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	f107 0c10 	add.w	ip, r7, #16
 800124e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiBuf[3];
	//Put CSN low
	PinStatusSetter(SMD_CSN_Pin , 0);
 8001252:	2100      	movs	r1, #0
 8001254:	2008      	movs	r0, #8
 8001256:	f7ff f95b 	bl	8000510 <PinStatusSetter>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800125a:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800125e:	f043 0320 	orr.w	r3, r3, #32
 8001262:	b2db      	uxtb	r3, r3
 8001264:	713b      	strb	r3, [r7, #4]
	spiBuf[1] = value;
 8001266:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800126a:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&hspix, spiBuf, 2, 100);
 800126c:	1d39      	adds	r1, r7, #4
 800126e:	2364      	movs	r3, #100	; 0x64
 8001270:	2202      	movs	r2, #2
 8001272:	f107 0010 	add.w	r0, r7, #16
 8001276:	f001 fc78 	bl	8002b6a <HAL_SPI_Transmit>
	//Bring CSN high
	PinStatusSetter(SMD_CSN_Pin ,1);
 800127a:	2101      	movs	r1, #1
 800127c:	2008      	movs	r0, #8
 800127e:	f7ff f947 	bl	8000510 <PinStatusSetter>
	spiBuf[1] = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	717b      	strb	r3, [r7, #5]
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001290:	b004      	add	sp, #16
 8001292:	4770      	bx	lr

08001294 <RfSetupReadSp2>:
//SPI2'ye bağlı nRF24L01'in data rate ve RF çıkış gücünü okuyoruz.
uint8_t RfSetupReadSp2(SPI_HandleTypeDef hspix,uint8_t reg)
{
 8001294:	b084      	sub	sp, #16
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	f107 0c10 	add.w	ip, r7, #16
 80012a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiBu[3];
	uint8_t retData = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	71fb      	strb	r3, [r7, #7]
	//Put CSN low
	PinStatusSetter(SMD_CSN_Pin , 0);
 80012a8:	2100      	movs	r1, #0
 80012aa:	2008      	movs	r0, #8
 80012ac:	f7ff f930 	bl	8000510 <PinStatusSetter>
	//Transmit register address
	spiBu[0] = reg&0x1F;
 80012b0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80012b4:	f003 031f 	and.w	r3, r3, #31
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	713b      	strb	r3, [r7, #4]
	HAL_SPI_Transmit(&hspix, spiBu, 1, 100);
 80012bc:	1d39      	adds	r1, r7, #4
 80012be:	2364      	movs	r3, #100	; 0x64
 80012c0:	2201      	movs	r2, #1
 80012c2:	f107 0010 	add.w	r0, r7, #16
 80012c6:	f001 fc50 	bl	8002b6a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&hspix, &spiBu[1], 1, 100);
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	1c59      	adds	r1, r3, #1
 80012ce:	2364      	movs	r3, #100	; 0x64
 80012d0:	2201      	movs	r2, #1
 80012d2:	f107 0010 	add.w	r0, r7, #16
 80012d6:	f001 fd84 	bl	8002de2 <HAL_SPI_Receive>
	retData = spiBu[1];
 80012da:	797b      	ldrb	r3, [r7, #5]
 80012dc:	71fb      	strb	r3, [r7, #7]
	//Bring CSN high
	PinStatusSetter(SMD_CSN_Pin , 1);
 80012de:	2101      	movs	r1, #1
 80012e0:	2008      	movs	r0, #8
 80012e2:	f7ff f915 	bl	8000510 <PinStatusSetter>
	spiBu[1] =0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	717b      	strb	r3, [r7, #5]
	return retData;
 80012ea:	79fb      	ldrb	r3, [r7, #7]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012f6:	b004      	add	sp, #16
 80012f8:	4770      	bx	lr

080012fa <R_RxPayload>:
//R_RX_PAYLOAD registerine kaydedilen datayı okuyoruz.
void R_RxPayload(SPI_HandleTypeDef hspix ,uint8_t reg)
{
 80012fa:	b084      	sub	sp, #16
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
 8001302:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001306:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	PinStatusSetter(SMD_CE_Pin, 1);
 800130a:	2101      	movs	r1, #1
 800130c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001310:	f7ff f8fe 	bl	8000510 <PinStatusSetter>
	NRF24_DelayMicroSeconds(150);
 8001314:	2096      	movs	r0, #150	; 0x96
 8001316:	f7ff f8d9 	bl	80004cc <NRF24_DelayMicroSeconds>
	uint8_t Data[32];

	PinStatusSetter(SMD_CSN_Pin, 0);
 800131a:	2100      	movs	r1, #0
 800131c:	2008      	movs	r0, #8
 800131e:	f7ff f8f7 	bl	8000510 <PinStatusSetter>
	HAL_SPI_Transmit(&hspix, &reg, 1, 100);
 8001322:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001326:	2364      	movs	r3, #100	; 0x64
 8001328:	2201      	movs	r2, #1
 800132a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800132e:	f001 fc1c 	bl	8002b6a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspix, Data,32,100);
 8001332:	4639      	mov	r1, r7
 8001334:	2364      	movs	r3, #100	; 0x64
 8001336:	2220      	movs	r2, #32
 8001338:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800133c:	f001 fd51 	bl	8002de2 <HAL_SPI_Receive>
	PinStatusSetter(SMD_CSN_Pin, 1);
 8001340:	2101      	movs	r1, #1
 8001342:	2008      	movs	r0, #8
 8001344:	f7ff f8e4 	bl	8000510 <PinStatusSetter>
	PinStatusSetter(SMD_CE_Pin, 0);
 8001348:	2100      	movs	r1, #0
 800134a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800134e:	f7ff f8df 	bl	8000510 <PinStatusSetter>
}
 8001352:	bf00      	nop
 8001354:	3720      	adds	r7, #32
 8001356:	46bd      	mov	sp, r7
 8001358:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800135c:	b004      	add	sp, #16
 800135e:	4770      	bx	lr

08001360 <nRF24_Init_Rx>:
//Rx İnitializasyon
void nRF24_Init_Rx()
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b095      	sub	sp, #84	; 0x54
 8001364:	af14      	add	r7, sp, #80	; 0x50
	Nrf24PrimPowerRegisterSpi2(hspi2 ,0x00 ,0x0B);
 8001366:	4c79      	ldr	r4, [pc, #484]	; (800154c <nRF24_Init_Rx+0x1ec>)
 8001368:	230b      	movs	r3, #11
 800136a:	9313      	str	r3, [sp, #76]	; 0x4c
 800136c:	2300      	movs	r3, #0
 800136e:	9312      	str	r3, [sp, #72]	; 0x48
 8001370:	4668      	mov	r0, sp
 8001372:	f104 0310 	add.w	r3, r4, #16
 8001376:	2248      	movs	r2, #72	; 0x48
 8001378:	4619      	mov	r1, r3
 800137a:	f002 fa57 	bl	800382c <memcpy>
 800137e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001382:	f7ff fd49 	bl	8000e18 <Nrf24PrimPowerRegisterSpi2>
	Nrf24PrinPowerRegisterReadSpi2(hspi2, 0x00);
 8001386:	4c71      	ldr	r4, [pc, #452]	; (800154c <nRF24_Init_Rx+0x1ec>)
 8001388:	2300      	movs	r3, #0
 800138a:	9312      	str	r3, [sp, #72]	; 0x48
 800138c:	4668      	mov	r0, sp
 800138e:	f104 0310 	add.w	r3, r4, #16
 8001392:	2248      	movs	r2, #72	; 0x48
 8001394:	4619      	mov	r1, r3
 8001396:	f002 fa49 	bl	800382c <memcpy>
 800139a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800139e:	f7ff fd62 	bl	8000e66 <Nrf24PrinPowerRegisterReadSpi2>
	NRF24_EN_RXADDR_SMD(hspi2, 0x02, 0x03);
 80013a2:	4c6a      	ldr	r4, [pc, #424]	; (800154c <nRF24_Init_Rx+0x1ec>)
 80013a4:	2303      	movs	r3, #3
 80013a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80013a8:	2302      	movs	r3, #2
 80013aa:	9312      	str	r3, [sp, #72]	; 0x48
 80013ac:	4668      	mov	r0, sp
 80013ae:	f104 0310 	add.w	r3, r4, #16
 80013b2:	2248      	movs	r2, #72	; 0x48
 80013b4:	4619      	mov	r1, r3
 80013b6:	f002 fa39 	bl	800382c <memcpy>
 80013ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013be:	f7ff fd81 	bl	8000ec4 <NRF24_EN_RXADDR_SMD>
	NRF24_EN_RXADDR_READ_SMD(hspi2, 0x02);
 80013c2:	4c62      	ldr	r4, [pc, #392]	; (800154c <nRF24_Init_Rx+0x1ec>)
 80013c4:	2302      	movs	r3, #2
 80013c6:	9312      	str	r3, [sp, #72]	; 0x48
 80013c8:	4668      	mov	r0, sp
 80013ca:	f104 0310 	add.w	r3, r4, #16
 80013ce:	2248      	movs	r2, #72	; 0x48
 80013d0:	4619      	mov	r1, r3
 80013d2:	f002 fa2b 	bl	800382c <memcpy>
 80013d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013da:	f7ff fd9a 	bl	8000f12 <NRF24_EN_RXADDR_READ_SMD>
	EN_AA_Smd(hspi2, 0X01, 0x3F);
 80013de:	4c5b      	ldr	r4, [pc, #364]	; (800154c <nRF24_Init_Rx+0x1ec>)
 80013e0:	233f      	movs	r3, #63	; 0x3f
 80013e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80013e4:	2301      	movs	r3, #1
 80013e6:	9312      	str	r3, [sp, #72]	; 0x48
 80013e8:	4668      	mov	r0, sp
 80013ea:	f104 0310 	add.w	r3, r4, #16
 80013ee:	2248      	movs	r2, #72	; 0x48
 80013f0:	4619      	mov	r1, r3
 80013f2:	f002 fa1b 	bl	800382c <memcpy>
 80013f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013fa:	f7ff fdb9 	bl	8000f70 <EN_AA_Smd>
	EN_AA_ReadSmd(hspi2, 0X01);
 80013fe:	4c53      	ldr	r4, [pc, #332]	; (800154c <nRF24_Init_Rx+0x1ec>)
 8001400:	2301      	movs	r3, #1
 8001402:	9312      	str	r3, [sp, #72]	; 0x48
 8001404:	4668      	mov	r0, sp
 8001406:	f104 0310 	add.w	r3, r4, #16
 800140a:	2248      	movs	r2, #72	; 0x48
 800140c:	4619      	mov	r1, r3
 800140e:	f002 fa0d 	bl	800382c <memcpy>
 8001412:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001416:	f7ff fdd2 	bl	8000fbe <EN_AA_ReadSmd>
	RxPwP0Spi2(hspi2, 0x11, 0x1F);
 800141a:	4c4c      	ldr	r4, [pc, #304]	; (800154c <nRF24_Init_Rx+0x1ec>)
 800141c:	231f      	movs	r3, #31
 800141e:	9313      	str	r3, [sp, #76]	; 0x4c
 8001420:	2311      	movs	r3, #17
 8001422:	9312      	str	r3, [sp, #72]	; 0x48
 8001424:	4668      	mov	r0, sp
 8001426:	f104 0310 	add.w	r3, r4, #16
 800142a:	2248      	movs	r2, #72	; 0x48
 800142c:	4619      	mov	r1, r3
 800142e:	f002 f9fd 	bl	800382c <memcpy>
 8001432:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001436:	f7ff fdee 	bl	8001016 <RxPwP0Spi2>
	RwPwP0ReadSpi2(hspi2, 0x11);
 800143a:	4c44      	ldr	r4, [pc, #272]	; (800154c <nRF24_Init_Rx+0x1ec>)
 800143c:	2311      	movs	r3, #17
 800143e:	9312      	str	r3, [sp, #72]	; 0x48
 8001440:	4668      	mov	r0, sp
 8001442:	f104 0310 	add.w	r3, r4, #16
 8001446:	2248      	movs	r2, #72	; 0x48
 8001448:	4619      	mov	r1, r3
 800144a:	f002 f9ef 	bl	800382c <memcpy>
 800144e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001452:	f7ff fe07 	bl	8001064 <RwPwP0ReadSpi2>
	RX_ADDR_P5_SMD(hspi2 ,0x0F ,5);
 8001456:	4c3d      	ldr	r4, [pc, #244]	; (800154c <nRF24_Init_Rx+0x1ec>)
 8001458:	2305      	movs	r3, #5
 800145a:	9313      	str	r3, [sp, #76]	; 0x4c
 800145c:	230f      	movs	r3, #15
 800145e:	9312      	str	r3, [sp, #72]	; 0x48
 8001460:	4668      	mov	r0, sp
 8001462:	f104 0310 	add.w	r3, r4, #16
 8001466:	2248      	movs	r2, #72	; 0x48
 8001468:	4619      	mov	r1, r3
 800146a:	f002 f9df 	bl	800382c <memcpy>
 800146e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001472:	f7ff fe26 	bl	80010c2 <RX_ADDR_P5_SMD>
	RX_ADDR_P5_READ_SMD(hspi2 ,0x0F);
 8001476:	4c35      	ldr	r4, [pc, #212]	; (800154c <nRF24_Init_Rx+0x1ec>)
 8001478:	230f      	movs	r3, #15
 800147a:	9312      	str	r3, [sp, #72]	; 0x48
 800147c:	4668      	mov	r0, sp
 800147e:	f104 0310 	add.w	r3, r4, #16
 8001482:	2248      	movs	r2, #72	; 0x48
 8001484:	4619      	mov	r1, r3
 8001486:	f002 f9d1 	bl	800382c <memcpy>
 800148a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800148e:	f7ff fe50 	bl	8001132 <RX_ADDR_P5_READ_SMD>
	RfChSpi2(hspi2,0x05, 0x02);
 8001492:	4c2e      	ldr	r4, [pc, #184]	; (800154c <nRF24_Init_Rx+0x1ec>)
 8001494:	2302      	movs	r3, #2
 8001496:	9313      	str	r3, [sp, #76]	; 0x4c
 8001498:	2305      	movs	r3, #5
 800149a:	9312      	str	r3, [sp, #72]	; 0x48
 800149c:	4668      	mov	r0, sp
 800149e:	f104 0310 	add.w	r3, r4, #16
 80014a2:	2248      	movs	r2, #72	; 0x48
 80014a4:	4619      	mov	r1, r3
 80014a6:	f002 f9c1 	bl	800382c <memcpy>
 80014aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014ae:	f7ff fe6c 	bl	800118a <RfChSpi2>
	RfChReadSpi2(hspi2, 0x05);
 80014b2:	4c26      	ldr	r4, [pc, #152]	; (800154c <nRF24_Init_Rx+0x1ec>)
 80014b4:	2305      	movs	r3, #5
 80014b6:	9312      	str	r3, [sp, #72]	; 0x48
 80014b8:	4668      	mov	r0, sp
 80014ba:	f104 0310 	add.w	r3, r4, #16
 80014be:	2248      	movs	r2, #72	; 0x48
 80014c0:	4619      	mov	r1, r3
 80014c2:	f002 f9b3 	bl	800382c <memcpy>
 80014c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014ca:	f7ff fe87 	bl	80011dc <RfChReadSpi2>
	RfSetupSp2(hspi2, 0x06, 0x0E);
 80014ce:	4c1f      	ldr	r4, [pc, #124]	; (800154c <nRF24_Init_Rx+0x1ec>)
 80014d0:	230e      	movs	r3, #14
 80014d2:	9313      	str	r3, [sp, #76]	; 0x4c
 80014d4:	2306      	movs	r3, #6
 80014d6:	9312      	str	r3, [sp, #72]	; 0x48
 80014d8:	4668      	mov	r0, sp
 80014da:	f104 0310 	add.w	r3, r4, #16
 80014de:	2248      	movs	r2, #72	; 0x48
 80014e0:	4619      	mov	r1, r3
 80014e2:	f002 f9a3 	bl	800382c <memcpy>
 80014e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014ea:	f7ff feaa 	bl	8001242 <RfSetupSp2>
	RfSetupReadSp2(hspi2, 0X06);
 80014ee:	4c17      	ldr	r4, [pc, #92]	; (800154c <nRF24_Init_Rx+0x1ec>)
 80014f0:	2306      	movs	r3, #6
 80014f2:	9312      	str	r3, [sp, #72]	; 0x48
 80014f4:	4668      	mov	r0, sp
 80014f6:	f104 0310 	add.w	r3, r4, #16
 80014fa:	2248      	movs	r2, #72	; 0x48
 80014fc:	4619      	mov	r1, r3
 80014fe:	f002 f995 	bl	800382c <memcpy>
 8001502:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001506:	f7ff fec5 	bl	8001294 <RfSetupReadSp2>
	TxPayload(hspi1,0xA0);
 800150a:	4c11      	ldr	r4, [pc, #68]	; (8001550 <nRF24_Init_Rx+0x1f0>)
 800150c:	23a0      	movs	r3, #160	; 0xa0
 800150e:	9312      	str	r3, [sp, #72]	; 0x48
 8001510:	4668      	mov	r0, sp
 8001512:	f104 0310 	add.w	r3, r4, #16
 8001516:	2248      	movs	r2, #72	; 0x48
 8001518:	4619      	mov	r1, r3
 800151a:	f002 f987 	bl	800382c <memcpy>
 800151e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001522:	f7ff f9f9 	bl	8000918 <TxPayload>
	R_RxPayload(hspi2 ,0x61);
 8001526:	4c09      	ldr	r4, [pc, #36]	; (800154c <nRF24_Init_Rx+0x1ec>)
 8001528:	2361      	movs	r3, #97	; 0x61
 800152a:	9312      	str	r3, [sp, #72]	; 0x48
 800152c:	4668      	mov	r0, sp
 800152e:	f104 0310 	add.w	r3, r4, #16
 8001532:	2248      	movs	r2, #72	; 0x48
 8001534:	4619      	mov	r1, r3
 8001536:	f002 f979 	bl	800382c <memcpy>
 800153a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800153e:	f7ff fedc 	bl	80012fa <R_RxPayload>
}
 8001542:	bf00      	nop
 8001544:	3704      	adds	r7, #4
 8001546:	46bd      	mov	sp, r7
 8001548:	bd90      	pop	{r4, r7, pc}
 800154a:	bf00      	nop
 800154c:	20000028 	.word	0x20000028
 8001550:	20000194 	.word	0x20000194

08001554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b093      	sub	sp, #76	; 0x4c
 8001558:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800155a:	f000 fad5 	bl	8001b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155e:	f000 f82f 	bl	80015c0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	PinStatusSetter(SMD_CSN_Pin, 1);
 8001562:	2101      	movs	r1, #1
 8001564:	2008      	movs	r0, #8
 8001566:	f7fe ffd3 	bl	8000510 <PinStatusSetter>
	PinStatusSetter(SMD_CE_Pin, 0);
 800156a:	2100      	movs	r1, #0
 800156c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001570:	f7fe ffce 	bl	8000510 <PinStatusSetter>

	PinStatusSetter(DIP_CSN_Pin, 1);
 8001574:	2101      	movs	r1, #1
 8001576:	f44f 7080 	mov.w	r0, #256	; 0x100
 800157a:	f7fe ffc9 	bl	8000510 <PinStatusSetter>
	PinStatusSetter(DIP_CE_Pin ,0);
 800157e:	2100      	movs	r1, #0
 8001580:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001584:	f7fe ffc4 	bl	8000510 <PinStatusSetter>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001588:	f000 f8f0 	bl	800176c <MX_GPIO_Init>
  MX_SPI1_Init();
 800158c:	f000 f882 	bl	8001694 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001590:	f000 f8b6 	bl	8001700 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	//HAL_SPI_Receive_IT(&hspi2, &rxdata, 1);
	Nrf24InitTx();
 8001594:	f7ff fb44 	bl	8000c20 <Nrf24InitTx>
	nRF24_Init_Rx();
 8001598:	f7ff fee2 	bl	8001360 <nRF24_Init_Rx>
    RxAdrP0AckRead( hspi1);
 800159c:	4c07      	ldr	r4, [pc, #28]	; (80015bc <main+0x68>)
 800159e:	4668      	mov	r0, sp
 80015a0:	f104 0310 	add.w	r3, r4, #16
 80015a4:	2248      	movs	r2, #72	; 0x48
 80015a6:	4619      	mov	r1, r3
 80015a8:	f002 f940 	bl	800382c <memcpy>
 80015ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015b0:	f7ff fb00 	bl	8000bb4 <RxAdrP0AckRead>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		HAL_Delay(1);
 80015b4:	2001      	movs	r0, #1
 80015b6:	f000 fb19 	bl	8001bec <HAL_Delay>
 80015ba:	e7fb      	b.n	80015b4 <main+0x60>
 80015bc:	20000194 	.word	0x20000194

080015c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b094      	sub	sp, #80	; 0x50
 80015c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c6:	f107 0320 	add.w	r3, r7, #32
 80015ca:	2230      	movs	r2, #48	; 0x30
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 f93a 	bl	8003848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	4b28      	ldr	r3, [pc, #160]	; (800168c <SystemClock_Config+0xcc>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	4a27      	ldr	r2, [pc, #156]	; (800168c <SystemClock_Config+0xcc>)
 80015ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f2:	6413      	str	r3, [r2, #64]	; 0x40
 80015f4:	4b25      	ldr	r3, [pc, #148]	; (800168c <SystemClock_Config+0xcc>)
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	4b22      	ldr	r3, [pc, #136]	; (8001690 <SystemClock_Config+0xd0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800160c:	4a20      	ldr	r2, [pc, #128]	; (8001690 <SystemClock_Config+0xd0>)
 800160e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <SystemClock_Config+0xd0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001620:	2301      	movs	r3, #1
 8001622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001624:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162a:	2302      	movs	r3, #2
 800162c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800162e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001634:	2304      	movs	r3, #4
 8001636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001638:	2354      	movs	r3, #84	; 0x54
 800163a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800163c:	2302      	movs	r3, #2
 800163e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001640:	2307      	movs	r3, #7
 8001642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001644:	f107 0320 	add.w	r3, r7, #32
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fdc5 	bl	80021d8 <HAL_RCC_OscConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001654:	f000 f902 	bl	800185c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001658:	230f      	movs	r3, #15
 800165a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800165c:	2302      	movs	r3, #2
 800165e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800166e:	f107 030c 	add.w	r3, r7, #12
 8001672:	2102      	movs	r1, #2
 8001674:	4618      	mov	r0, r3
 8001676:	f001 f827 	bl	80026c8 <HAL_RCC_ClockConfig>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001680:	f000 f8ec 	bl	800185c <Error_Handler>
  }
}
 8001684:	bf00      	nop
 8001686:	3750      	adds	r7, #80	; 0x50
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40023800 	.word	0x40023800
 8001690:	40007000 	.word	0x40007000

08001694 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_SPI1_Init+0x64>)
 800169a:	4a18      	ldr	r2, [pc, #96]	; (80016fc <MX_SPI1_Init+0x68>)
 800169c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016c8:	2218      	movs	r2, #24
 80016ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016da:	2200      	movs	r2, #0
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016e0:	220a      	movs	r2, #10
 80016e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016e4:	4804      	ldr	r0, [pc, #16]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016e6:	f001 f9b7 	bl	8002a58 <HAL_SPI_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016f0:	f000 f8b4 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000194 	.word	0x20000194
 80016fc:	40013000 	.word	0x40013000

08001700 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <MX_SPI2_Init+0x64>)
 8001706:	4a18      	ldr	r2, [pc, #96]	; (8001768 <MX_SPI2_Init+0x68>)
 8001708:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <MX_SPI2_Init+0x64>)
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <MX_SPI2_Init+0x64>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <MX_SPI2_Init+0x64>)
 8001718:	2200      	movs	r2, #0
 800171a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_SPI2_Init+0x64>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <MX_SPI2_Init+0x64>)
 8001724:	2200      	movs	r2, #0
 8001726:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <MX_SPI2_Init+0x64>)
 800172a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800172e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <MX_SPI2_Init+0x64>)
 8001732:	2218      	movs	r2, #24
 8001734:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <MX_SPI2_Init+0x64>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_SPI2_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <MX_SPI2_Init+0x64>)
 8001744:	2200      	movs	r2, #0
 8001746:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <MX_SPI2_Init+0x64>)
 800174a:	220a      	movs	r2, #10
 800174c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800174e:	4805      	ldr	r0, [pc, #20]	; (8001764 <MX_SPI2_Init+0x64>)
 8001750:	f001 f982 	bl	8002a58 <HAL_SPI_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 800175a:	f000 f87f 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000028 	.word	0x20000028
 8001768:	40003800 	.word	0x40003800

0800176c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b32      	ldr	r3, [pc, #200]	; (8001850 <MX_GPIO_Init+0xe4>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a31      	ldr	r2, [pc, #196]	; (8001850 <MX_GPIO_Init+0xe4>)
 800178c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <MX_GPIO_Init+0xe4>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <MX_GPIO_Init+0xe4>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a2a      	ldr	r2, [pc, #168]	; (8001850 <MX_GPIO_Init+0xe4>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b28      	ldr	r3, [pc, #160]	; (8001850 <MX_GPIO_Init+0xe4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	4b24      	ldr	r3, [pc, #144]	; (8001850 <MX_GPIO_Init+0xe4>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a23      	ldr	r2, [pc, #140]	; (8001850 <MX_GPIO_Init+0xe4>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b21      	ldr	r3, [pc, #132]	; (8001850 <MX_GPIO_Init+0xe4>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <MX_GPIO_Init+0xe4>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a1c      	ldr	r2, [pc, #112]	; (8001850 <MX_GPIO_Init+0xe4>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <MX_GPIO_Init+0xe4>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMD_CSN_Pin|DIP_CSN_Pin|SMD_CE_Pin|DIP_CE_Pin, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80017f8:	4816      	ldr	r0, [pc, #88]	; (8001854 <MX_GPIO_Init+0xe8>)
 80017fa:	f000 fcd3 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIPnRF_IRQ_Pin|SMDnRF_IRQ_Pin, GPIO_PIN_RESET);
 80017fe:	2200      	movs	r2, #0
 8001800:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001804:	4814      	ldr	r0, [pc, #80]	; (8001858 <MX_GPIO_Init+0xec>)
 8001806:	f000 fccd 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SMD_CSN_Pin DIP_CSN_Pin SMD_CE_Pin DIP_CE_Pin */
  GPIO_InitStruct.Pin = SMD_CSN_Pin|DIP_CSN_Pin|SMD_CE_Pin|DIP_CE_Pin;
 800180a:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800180e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001810:	2301      	movs	r3, #1
 8001812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	480c      	ldr	r0, [pc, #48]	; (8001854 <MX_GPIO_Init+0xe8>)
 8001824:	f000 fb3a 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIPnRF_IRQ_Pin SMDnRF_IRQ_Pin */
  GPIO_InitStruct.Pin = DIPnRF_IRQ_Pin|SMDnRF_IRQ_Pin;
 8001828:	f44f 7308 	mov.w	r3, #544	; 0x220
 800182c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182e:	2301      	movs	r3, #1
 8001830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_GPIO_Init+0xec>)
 8001842:	f000 fb2b 	bl	8001e9c <HAL_GPIO_Init>

}
 8001846:	bf00      	nop
 8001848:	3728      	adds	r7, #40	; 0x28
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800
 8001854:	40020000 	.word	0x40020000
 8001858:	40020400 	.word	0x40020400

0800185c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001860:	b672      	cpsid	i
}
 8001862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001864:	e7fe      	b.n	8001864 <Error_Handler+0x8>
	...

08001868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <HAL_MspInit+0x4c>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	4a0f      	ldr	r2, [pc, #60]	; (80018b4 <HAL_MspInit+0x4c>)
 8001878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187c:	6453      	str	r3, [r2, #68]	; 0x44
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <HAL_MspInit+0x4c>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_MspInit+0x4c>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <HAL_MspInit+0x4c>)
 8001894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001898:	6413      	str	r3, [r2, #64]	; 0x40
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_MspInit+0x4c>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018a6:	2007      	movs	r0, #7
 80018a8:	f000 fa94 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40023800 	.word	0x40023800

080018b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	; 0x30
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 031c 	add.w	r3, r7, #28
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a49      	ldr	r2, [pc, #292]	; (80019fc <HAL_SPI_MspInit+0x144>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d134      	bne.n	8001944 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	4b48      	ldr	r3, [pc, #288]	; (8001a00 <HAL_SPI_MspInit+0x148>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	4a47      	ldr	r2, [pc, #284]	; (8001a00 <HAL_SPI_MspInit+0x148>)
 80018e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018e8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ea:	4b45      	ldr	r3, [pc, #276]	; (8001a00 <HAL_SPI_MspInit+0x148>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	4b41      	ldr	r3, [pc, #260]	; (8001a00 <HAL_SPI_MspInit+0x148>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a40      	ldr	r2, [pc, #256]	; (8001a00 <HAL_SPI_MspInit+0x148>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b3e      	ldr	r3, [pc, #248]	; (8001a00 <HAL_SPI_MspInit+0x148>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001912:	23e0      	movs	r3, #224	; 0xe0
 8001914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191e:	2303      	movs	r3, #3
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001922:	2305      	movs	r3, #5
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	f107 031c 	add.w	r3, r7, #28
 800192a:	4619      	mov	r1, r3
 800192c:	4835      	ldr	r0, [pc, #212]	; (8001a04 <HAL_SPI_MspInit+0x14c>)
 800192e:	f000 fab5 	bl	8001e9c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	2023      	movs	r0, #35	; 0x23
 8001938:	f000 fa57 	bl	8001dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800193c:	2023      	movs	r0, #35	; 0x23
 800193e:	f000 fa70 	bl	8001e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001942:	e057      	b.n	80019f4 <HAL_SPI_MspInit+0x13c>
  else if(hspi->Instance==SPI2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a2f      	ldr	r2, [pc, #188]	; (8001a08 <HAL_SPI_MspInit+0x150>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d152      	bne.n	80019f4 <HAL_SPI_MspInit+0x13c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <HAL_SPI_MspInit+0x148>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	4a2a      	ldr	r2, [pc, #168]	; (8001a00 <HAL_SPI_MspInit+0x148>)
 8001958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800195c:	6413      	str	r3, [r2, #64]	; 0x40
 800195e:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <HAL_SPI_MspInit+0x148>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <HAL_SPI_MspInit+0x148>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a23      	ldr	r2, [pc, #140]	; (8001a00 <HAL_SPI_MspInit+0x148>)
 8001974:	f043 0304 	orr.w	r3, r3, #4
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <HAL_SPI_MspInit+0x148>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <HAL_SPI_MspInit+0x148>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a1c      	ldr	r2, [pc, #112]	; (8001a00 <HAL_SPI_MspInit+0x148>)
 8001990:	f043 0302 	orr.w	r3, r3, #2
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <HAL_SPI_MspInit+0x148>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SP2_MISO_Pin|SPI2_MOSI_Pin;
 80019a2:	230c      	movs	r3, #12
 80019a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019b2:	2305      	movs	r3, #5
 80019b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b6:	f107 031c 	add.w	r3, r7, #28
 80019ba:	4619      	mov	r1, r3
 80019bc:	4813      	ldr	r0, [pc, #76]	; (8001a0c <HAL_SPI_MspInit+0x154>)
 80019be:	f000 fa6d 	bl	8001e9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 80019c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019d4:	2305      	movs	r3, #5
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f107 031c 	add.w	r3, r7, #28
 80019dc:	4619      	mov	r1, r3
 80019de:	480c      	ldr	r0, [pc, #48]	; (8001a10 <HAL_SPI_MspInit+0x158>)
 80019e0:	f000 fa5c 	bl	8001e9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2100      	movs	r1, #0
 80019e8:	2024      	movs	r0, #36	; 0x24
 80019ea:	f000 f9fe 	bl	8001dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80019ee:	2024      	movs	r0, #36	; 0x24
 80019f0:	f000 fa17 	bl	8001e22 <HAL_NVIC_EnableIRQ>
}
 80019f4:	bf00      	nop
 80019f6:	3730      	adds	r7, #48	; 0x30
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40013000 	.word	0x40013000
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40020000 	.word	0x40020000
 8001a08:	40003800 	.word	0x40003800
 8001a0c:	40020800 	.word	0x40020800
 8001a10:	40020400 	.word	0x40020400

08001a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <NMI_Handler+0x4>

08001a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1e:	e7fe      	b.n	8001a1e <HardFault_Handler+0x4>

08001a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <MemManage_Handler+0x4>

08001a26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <BusFault_Handler+0x4>

08001a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <UsageFault_Handler+0x4>

08001a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a60:	f000 f8a4 	bl	8001bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <SPI1_IRQHandler+0x10>)
 8001a6e:	f001 fc6b 	bl	8003348 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000194 	.word	0x20000194

08001a7c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <SPI2_IRQHandler+0x10>)
 8001a82:	f001 fc61 	bl	8003348 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000028 	.word	0x20000028

08001a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <SystemInit+0x20>)
 8001a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9a:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <SystemInit+0x20>)
 8001a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ab8:	480d      	ldr	r0, [pc, #52]	; (8001af0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aba:	490e      	ldr	r1, [pc, #56]	; (8001af4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001abc:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ad0:	4c0b      	ldr	r4, [pc, #44]	; (8001b00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ade:	f7ff ffd7 	bl	8001a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ae2:	f001 fe7f 	bl	80037e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae6:	f7ff fd35 	bl	8001554 <main>
  bx  lr    
 8001aea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001af8:	080038b0 	.word	0x080038b0
  ldr r2, =_sbss
 8001afc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b00:	200001f0 	.word	0x200001f0

08001b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b04:	e7fe      	b.n	8001b04 <ADC_IRQHandler>
	...

08001b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_Init+0x40>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <HAL_Init+0x40>)
 8001b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_Init+0x40>)
 8001b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <HAL_Init+0x40>)
 8001b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b30:	2003      	movs	r0, #3
 8001b32:	f000 f94f 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b36:	2000      	movs	r0, #0
 8001b38:	f000 f808 	bl	8001b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b3c:	f7ff fe94 	bl	8001868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023c00 	.word	0x40023c00

08001b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_InitTick+0x54>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_InitTick+0x58>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f967 	bl	8001e3e <HAL_SYSTICK_Config>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00e      	b.n	8001b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b0f      	cmp	r3, #15
 8001b7e:	d80a      	bhi.n	8001b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b80:	2200      	movs	r2, #0
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295
 8001b88:	f000 f92f 	bl	8001dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b8c:	4a06      	ldr	r2, [pc, #24]	; (8001ba8 <HAL_InitTick+0x5c>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e000      	b.n	8001b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	20000008 	.word	0x20000008
 8001ba8:	20000004 	.word	0x20000004

08001bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_IncTick+0x20>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_IncTick+0x24>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <HAL_IncTick+0x24>)
 8001bbe:	6013      	str	r3, [r2, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000008 	.word	0x20000008
 8001bd0:	200001ec 	.word	0x200001ec

08001bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <HAL_GetTick+0x14>)
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	200001ec 	.word	0x200001ec

08001bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf4:	f7ff ffee 	bl	8001bd4 <HAL_GetTick>
 8001bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c04:	d005      	beq.n	8001c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <HAL_Delay+0x44>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4413      	add	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c12:	bf00      	nop
 8001c14:	f7ff ffde 	bl	8001bd4 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d8f7      	bhi.n	8001c14 <HAL_Delay+0x28>
  {
  }
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000008 	.word	0x20000008

08001c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c50:	4013      	ands	r3, r2
 8001c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c66:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	60d3      	str	r3, [r2, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <__NVIC_GetPriorityGrouping+0x18>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	f003 0307 	and.w	r3, r3, #7
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	db0b      	blt.n	8001cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	f003 021f 	and.w	r2, r3, #31
 8001cb0:	4907      	ldr	r1, [pc, #28]	; (8001cd0 <__NVIC_EnableIRQ+0x38>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	2001      	movs	r0, #1
 8001cba:	fa00 f202 	lsl.w	r2, r0, r2
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000e100 	.word	0xe000e100

08001cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	db0a      	blt.n	8001cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	490c      	ldr	r1, [pc, #48]	; (8001d20 <__NVIC_SetPriority+0x4c>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cfc:	e00a      	b.n	8001d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4908      	ldr	r1, [pc, #32]	; (8001d24 <__NVIC_SetPriority+0x50>)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3b04      	subs	r3, #4
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	761a      	strb	r2, [r3, #24]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	; 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f1c3 0307 	rsb	r3, r3, #7
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf28      	it	cs
 8001d46:	2304      	movcs	r3, #4
 8001d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d902      	bls.n	8001d58 <NVIC_EncodePriority+0x30>
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3b03      	subs	r3, #3
 8001d56:	e000      	b.n	8001d5a <NVIC_EncodePriority+0x32>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43d9      	mvns	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	4313      	orrs	r3, r2
         );
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da0:	d301      	bcc.n	8001da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00f      	b.n	8001dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <SysTick_Config+0x40>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dae:	210f      	movs	r1, #15
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295
 8001db4:	f7ff ff8e 	bl	8001cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <SysTick_Config+0x40>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <SysTick_Config+0x40>)
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff29 	bl	8001c34 <__NVIC_SetPriorityGrouping>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfc:	f7ff ff3e 	bl	8001c7c <__NVIC_GetPriorityGrouping>
 8001e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff ff8e 	bl	8001d28 <NVIC_EncodePriority>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff5d 	bl	8001cd4 <__NVIC_SetPriority>
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff31 	bl	8001c98 <__NVIC_EnableIRQ>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ffa2 	bl	8001d90 <SysTick_Config>
 8001e4c:	4603      	mov	r3, r0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d004      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2280      	movs	r2, #128	; 0x80
 8001e6e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e00c      	b.n	8001e8e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2205      	movs	r2, #5
 8001e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0201 	bic.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	e159      	b.n	800216c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eb8:	2201      	movs	r2, #1
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	f040 8148 	bne.w	8002166 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d005      	beq.n	8001eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d130      	bne.n	8001f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	2203      	movs	r2, #3
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f24:	2201      	movs	r2, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 0201 	and.w	r2, r3, #1
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d017      	beq.n	8001f8c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	2203      	movs	r2, #3
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d123      	bne.n	8001fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	08da      	lsrs	r2, r3, #3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3208      	adds	r2, #8
 8001fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	220f      	movs	r2, #15
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	08da      	lsrs	r2, r3, #3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3208      	adds	r2, #8
 8001fda:	69b9      	ldr	r1, [r7, #24]
 8001fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	2203      	movs	r2, #3
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0203 	and.w	r2, r3, #3
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80a2 	beq.w	8002166 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b57      	ldr	r3, [pc, #348]	; (8002184 <HAL_GPIO_Init+0x2e8>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	4a56      	ldr	r2, [pc, #344]	; (8002184 <HAL_GPIO_Init+0x2e8>)
 800202c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002030:	6453      	str	r3, [r2, #68]	; 0x44
 8002032:	4b54      	ldr	r3, [pc, #336]	; (8002184 <HAL_GPIO_Init+0x2e8>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800203e:	4a52      	ldr	r2, [pc, #328]	; (8002188 <HAL_GPIO_Init+0x2ec>)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	3302      	adds	r3, #2
 8002046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	220f      	movs	r2, #15
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a49      	ldr	r2, [pc, #292]	; (800218c <HAL_GPIO_Init+0x2f0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d019      	beq.n	800209e <HAL_GPIO_Init+0x202>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a48      	ldr	r2, [pc, #288]	; (8002190 <HAL_GPIO_Init+0x2f4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_GPIO_Init+0x1fe>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a47      	ldr	r2, [pc, #284]	; (8002194 <HAL_GPIO_Init+0x2f8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00d      	beq.n	8002096 <HAL_GPIO_Init+0x1fa>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a46      	ldr	r2, [pc, #280]	; (8002198 <HAL_GPIO_Init+0x2fc>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d007      	beq.n	8002092 <HAL_GPIO_Init+0x1f6>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a45      	ldr	r2, [pc, #276]	; (800219c <HAL_GPIO_Init+0x300>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d101      	bne.n	800208e <HAL_GPIO_Init+0x1f2>
 800208a:	2304      	movs	r3, #4
 800208c:	e008      	b.n	80020a0 <HAL_GPIO_Init+0x204>
 800208e:	2307      	movs	r3, #7
 8002090:	e006      	b.n	80020a0 <HAL_GPIO_Init+0x204>
 8002092:	2303      	movs	r3, #3
 8002094:	e004      	b.n	80020a0 <HAL_GPIO_Init+0x204>
 8002096:	2302      	movs	r3, #2
 8002098:	e002      	b.n	80020a0 <HAL_GPIO_Init+0x204>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_GPIO_Init+0x204>
 800209e:	2300      	movs	r3, #0
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	f002 0203 	and.w	r2, r2, #3
 80020a6:	0092      	lsls	r2, r2, #2
 80020a8:	4093      	lsls	r3, r2
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b0:	4935      	ldr	r1, [pc, #212]	; (8002188 <HAL_GPIO_Init+0x2ec>)
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	089b      	lsrs	r3, r3, #2
 80020b6:	3302      	adds	r3, #2
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020be:	4b38      	ldr	r3, [pc, #224]	; (80021a0 <HAL_GPIO_Init+0x304>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020e2:	4a2f      	ldr	r2, [pc, #188]	; (80021a0 <HAL_GPIO_Init+0x304>)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020e8:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <HAL_GPIO_Init+0x304>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800210c:	4a24      	ldr	r2, [pc, #144]	; (80021a0 <HAL_GPIO_Init+0x304>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002112:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <HAL_GPIO_Init+0x304>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002136:	4a1a      	ldr	r2, [pc, #104]	; (80021a0 <HAL_GPIO_Init+0x304>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800213c:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <HAL_GPIO_Init+0x304>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002160:	4a0f      	ldr	r2, [pc, #60]	; (80021a0 <HAL_GPIO_Init+0x304>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3301      	adds	r3, #1
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	2b0f      	cmp	r3, #15
 8002170:	f67f aea2 	bls.w	8001eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3724      	adds	r7, #36	; 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	40013800 	.word	0x40013800
 800218c:	40020000 	.word	0x40020000
 8002190:	40020400 	.word	0x40020400
 8002194:	40020800 	.word	0x40020800
 8002198:	40020c00 	.word	0x40020c00
 800219c:	40021000 	.word	0x40021000
 80021a0:	40013c00 	.word	0x40013c00

080021a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
 80021b0:	4613      	mov	r3, r2
 80021b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b4:	787b      	ldrb	r3, [r7, #1]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021c0:	e003      	b.n	80021ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021c2:	887b      	ldrh	r3, [r7, #2]
 80021c4:	041a      	lsls	r2, r3, #16
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	619a      	str	r2, [r3, #24]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e264      	b.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d075      	beq.n	80022e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021f6:	4ba3      	ldr	r3, [pc, #652]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d00c      	beq.n	800221c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002202:	4ba0      	ldr	r3, [pc, #640]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800220a:	2b08      	cmp	r3, #8
 800220c:	d112      	bne.n	8002234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800220e:	4b9d      	ldr	r3, [pc, #628]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800221a:	d10b      	bne.n	8002234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221c:	4b99      	ldr	r3, [pc, #612]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d05b      	beq.n	80022e0 <HAL_RCC_OscConfig+0x108>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d157      	bne.n	80022e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e23f      	b.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223c:	d106      	bne.n	800224c <HAL_RCC_OscConfig+0x74>
 800223e:	4b91      	ldr	r3, [pc, #580]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a90      	ldr	r2, [pc, #576]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e01d      	b.n	8002288 <HAL_RCC_OscConfig+0xb0>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0x98>
 8002256:	4b8b      	ldr	r3, [pc, #556]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a8a      	ldr	r2, [pc, #552]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 800225c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	4b88      	ldr	r3, [pc, #544]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a87      	ldr	r2, [pc, #540]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	e00b      	b.n	8002288 <HAL_RCC_OscConfig+0xb0>
 8002270:	4b84      	ldr	r3, [pc, #528]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a83      	ldr	r2, [pc, #524]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	4b81      	ldr	r3, [pc, #516]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a80      	ldr	r2, [pc, #512]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d013      	beq.n	80022b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7ff fca0 	bl	8001bd4 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002298:	f7ff fc9c 	bl	8001bd4 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	; 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e204      	b.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	4b76      	ldr	r3, [pc, #472]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0xc0>
 80022b6:	e014      	b.n	80022e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7ff fc8c 	bl	8001bd4 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c0:	f7ff fc88 	bl	8001bd4 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	; 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e1f0      	b.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d2:	4b6c      	ldr	r3, [pc, #432]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0xe8>
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d063      	beq.n	80023b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ee:	4b65      	ldr	r3, [pc, #404]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022fa:	4b62      	ldr	r3, [pc, #392]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002302:	2b08      	cmp	r3, #8
 8002304:	d11c      	bne.n	8002340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002306:	4b5f      	ldr	r3, [pc, #380]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d116      	bne.n	8002340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002312:	4b5c      	ldr	r3, [pc, #368]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <HAL_RCC_OscConfig+0x152>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d001      	beq.n	800232a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e1c4      	b.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232a:	4b56      	ldr	r3, [pc, #344]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4952      	ldr	r1, [pc, #328]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233e:	e03a      	b.n	80023b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d020      	beq.n	800238a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002348:	4b4f      	ldr	r3, [pc, #316]	; (8002488 <HAL_RCC_OscConfig+0x2b0>)
 800234a:	2201      	movs	r2, #1
 800234c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234e:	f7ff fc41 	bl	8001bd4 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002356:	f7ff fc3d 	bl	8001bd4 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e1a5      	b.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002368:	4b46      	ldr	r3, [pc, #280]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002374:	4b43      	ldr	r3, [pc, #268]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4940      	ldr	r1, [pc, #256]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	4313      	orrs	r3, r2
 8002386:	600b      	str	r3, [r1, #0]
 8002388:	e015      	b.n	80023b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238a:	4b3f      	ldr	r3, [pc, #252]	; (8002488 <HAL_RCC_OscConfig+0x2b0>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7ff fc20 	bl	8001bd4 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002398:	f7ff fc1c 	bl	8001bd4 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e184      	b.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023aa:	4b36      	ldr	r3, [pc, #216]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d030      	beq.n	8002424 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d016      	beq.n	80023f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ca:	4b30      	ldr	r3, [pc, #192]	; (800248c <HAL_RCC_OscConfig+0x2b4>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d0:	f7ff fc00 	bl	8001bd4 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023d8:	f7ff fbfc 	bl	8001bd4 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e164      	b.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ea:	4b26      	ldr	r3, [pc, #152]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x200>
 80023f6:	e015      	b.n	8002424 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f8:	4b24      	ldr	r3, [pc, #144]	; (800248c <HAL_RCC_OscConfig+0x2b4>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fe:	f7ff fbe9 	bl	8001bd4 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002406:	f7ff fbe5 	bl	8001bd4 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e14d      	b.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002418:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 800241a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f0      	bne.n	8002406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 80a0 	beq.w	8002572 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002432:	2300      	movs	r3, #0
 8002434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002436:	4b13      	ldr	r3, [pc, #76]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10f      	bne.n	8002462 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 800244c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002450:	6413      	str	r3, [r2, #64]	; 0x40
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245e:	2301      	movs	r3, #1
 8002460:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_RCC_OscConfig+0x2b8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d121      	bne.n	80024b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800246e:	4b08      	ldr	r3, [pc, #32]	; (8002490 <HAL_RCC_OscConfig+0x2b8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a07      	ldr	r2, [pc, #28]	; (8002490 <HAL_RCC_OscConfig+0x2b8>)
 8002474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800247a:	f7ff fbab 	bl	8001bd4 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002480:	e011      	b.n	80024a6 <HAL_RCC_OscConfig+0x2ce>
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800
 8002488:	42470000 	.word	0x42470000
 800248c:	42470e80 	.word	0x42470e80
 8002490:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002494:	f7ff fb9e 	bl	8001bd4 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e106      	b.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a6:	4b85      	ldr	r3, [pc, #532]	; (80026bc <HAL_RCC_OscConfig+0x4e4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d106      	bne.n	80024c8 <HAL_RCC_OscConfig+0x2f0>
 80024ba:	4b81      	ldr	r3, [pc, #516]	; (80026c0 <HAL_RCC_OscConfig+0x4e8>)
 80024bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024be:	4a80      	ldr	r2, [pc, #512]	; (80026c0 <HAL_RCC_OscConfig+0x4e8>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6713      	str	r3, [r2, #112]	; 0x70
 80024c6:	e01c      	b.n	8002502 <HAL_RCC_OscConfig+0x32a>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d10c      	bne.n	80024ea <HAL_RCC_OscConfig+0x312>
 80024d0:	4b7b      	ldr	r3, [pc, #492]	; (80026c0 <HAL_RCC_OscConfig+0x4e8>)
 80024d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d4:	4a7a      	ldr	r2, [pc, #488]	; (80026c0 <HAL_RCC_OscConfig+0x4e8>)
 80024d6:	f043 0304 	orr.w	r3, r3, #4
 80024da:	6713      	str	r3, [r2, #112]	; 0x70
 80024dc:	4b78      	ldr	r3, [pc, #480]	; (80026c0 <HAL_RCC_OscConfig+0x4e8>)
 80024de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e0:	4a77      	ldr	r2, [pc, #476]	; (80026c0 <HAL_RCC_OscConfig+0x4e8>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6713      	str	r3, [r2, #112]	; 0x70
 80024e8:	e00b      	b.n	8002502 <HAL_RCC_OscConfig+0x32a>
 80024ea:	4b75      	ldr	r3, [pc, #468]	; (80026c0 <HAL_RCC_OscConfig+0x4e8>)
 80024ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ee:	4a74      	ldr	r2, [pc, #464]	; (80026c0 <HAL_RCC_OscConfig+0x4e8>)
 80024f0:	f023 0301 	bic.w	r3, r3, #1
 80024f4:	6713      	str	r3, [r2, #112]	; 0x70
 80024f6:	4b72      	ldr	r3, [pc, #456]	; (80026c0 <HAL_RCC_OscConfig+0x4e8>)
 80024f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fa:	4a71      	ldr	r2, [pc, #452]	; (80026c0 <HAL_RCC_OscConfig+0x4e8>)
 80024fc:	f023 0304 	bic.w	r3, r3, #4
 8002500:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d015      	beq.n	8002536 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250a:	f7ff fb63 	bl	8001bd4 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002510:	e00a      	b.n	8002528 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002512:	f7ff fb5f 	bl	8001bd4 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002520:	4293      	cmp	r3, r2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e0c5      	b.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002528:	4b65      	ldr	r3, [pc, #404]	; (80026c0 <HAL_RCC_OscConfig+0x4e8>)
 800252a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0ee      	beq.n	8002512 <HAL_RCC_OscConfig+0x33a>
 8002534:	e014      	b.n	8002560 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002536:	f7ff fb4d 	bl	8001bd4 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253c:	e00a      	b.n	8002554 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800253e:	f7ff fb49 	bl	8001bd4 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f241 3288 	movw	r2, #5000	; 0x1388
 800254c:	4293      	cmp	r3, r2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e0af      	b.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002554:	4b5a      	ldr	r3, [pc, #360]	; (80026c0 <HAL_RCC_OscConfig+0x4e8>)
 8002556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1ee      	bne.n	800253e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002560:	7dfb      	ldrb	r3, [r7, #23]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d105      	bne.n	8002572 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002566:	4b56      	ldr	r3, [pc, #344]	; (80026c0 <HAL_RCC_OscConfig+0x4e8>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	4a55      	ldr	r2, [pc, #340]	; (80026c0 <HAL_RCC_OscConfig+0x4e8>)
 800256c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002570:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 809b 	beq.w	80026b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800257c:	4b50      	ldr	r3, [pc, #320]	; (80026c0 <HAL_RCC_OscConfig+0x4e8>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 030c 	and.w	r3, r3, #12
 8002584:	2b08      	cmp	r3, #8
 8002586:	d05c      	beq.n	8002642 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d141      	bne.n	8002614 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002590:	4b4c      	ldr	r3, [pc, #304]	; (80026c4 <HAL_RCC_OscConfig+0x4ec>)
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7ff fb1d 	bl	8001bd4 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259e:	f7ff fb19 	bl	8001bd4 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e081      	b.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b0:	4b43      	ldr	r3, [pc, #268]	; (80026c0 <HAL_RCC_OscConfig+0x4e8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f0      	bne.n	800259e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	019b      	lsls	r3, r3, #6
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d2:	085b      	lsrs	r3, r3, #1
 80025d4:	3b01      	subs	r3, #1
 80025d6:	041b      	lsls	r3, r3, #16
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	061b      	lsls	r3, r3, #24
 80025e0:	4937      	ldr	r1, [pc, #220]	; (80026c0 <HAL_RCC_OscConfig+0x4e8>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e6:	4b37      	ldr	r3, [pc, #220]	; (80026c4 <HAL_RCC_OscConfig+0x4ec>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7ff faf2 	bl	8001bd4 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f4:	f7ff faee 	bl	8001bd4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e056      	b.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002606:	4b2e      	ldr	r3, [pc, #184]	; (80026c0 <HAL_RCC_OscConfig+0x4e8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x41c>
 8002612:	e04e      	b.n	80026b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002614:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <HAL_RCC_OscConfig+0x4ec>)
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261a:	f7ff fadb 	bl	8001bd4 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002622:	f7ff fad7 	bl	8001bd4 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e03f      	b.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002634:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <HAL_RCC_OscConfig+0x4e8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1f0      	bne.n	8002622 <HAL_RCC_OscConfig+0x44a>
 8002640:	e037      	b.n	80026b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e032      	b.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800264e:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <HAL_RCC_OscConfig+0x4e8>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d028      	beq.n	80026ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d121      	bne.n	80026ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002674:	429a      	cmp	r2, r3
 8002676:	d11a      	bne.n	80026ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800267e:	4013      	ands	r3, r2
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002684:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002686:	4293      	cmp	r3, r2
 8002688:	d111      	bne.n	80026ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	085b      	lsrs	r3, r3, #1
 8002696:	3b01      	subs	r3, #1
 8002698:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800269a:	429a      	cmp	r2, r3
 800269c:	d107      	bne.n	80026ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d001      	beq.n	80026b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40007000 	.word	0x40007000
 80026c0:	40023800 	.word	0x40023800
 80026c4:	42470060 	.word	0x42470060

080026c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0cc      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026dc:	4b68      	ldr	r3, [pc, #416]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d90c      	bls.n	8002704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b65      	ldr	r3, [pc, #404]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b63      	ldr	r3, [pc, #396]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0b8      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d020      	beq.n	8002752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800271c:	4b59      	ldr	r3, [pc, #356]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	4a58      	ldr	r2, [pc, #352]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002734:	4b53      	ldr	r3, [pc, #332]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	4a52      	ldr	r2, [pc, #328]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800273e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002740:	4b50      	ldr	r3, [pc, #320]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	494d      	ldr	r1, [pc, #308]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d044      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	4b47      	ldr	r3, [pc, #284]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d119      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e07f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d003      	beq.n	8002786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002782:	2b03      	cmp	r3, #3
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002786:	4b3f      	ldr	r3, [pc, #252]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e06f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002796:	4b3b      	ldr	r3, [pc, #236]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e067      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027a6:	4b37      	ldr	r3, [pc, #220]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f023 0203 	bic.w	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4934      	ldr	r1, [pc, #208]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b8:	f7ff fa0c 	bl	8001bd4 <HAL_GetTick>
 80027bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	e00a      	b.n	80027d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c0:	f7ff fa08 	bl	8001bd4 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e04f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	4b2b      	ldr	r3, [pc, #172]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 020c 	and.w	r2, r3, #12
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d1eb      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027e8:	4b25      	ldr	r3, [pc, #148]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d20c      	bcs.n	8002810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b22      	ldr	r3, [pc, #136]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b20      	ldr	r3, [pc, #128]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e032      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4916      	ldr	r1, [pc, #88]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	490e      	ldr	r1, [pc, #56]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	4313      	orrs	r3, r2
 800284c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800284e:	f000 f821 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8002852:	4602      	mov	r2, r0
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	490a      	ldr	r1, [pc, #40]	; (8002888 <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	5ccb      	ldrb	r3, [r1, r3]
 8002862:	fa22 f303 	lsr.w	r3, r2, r3
 8002866:	4a09      	ldr	r2, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1c8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff f96c 	bl	8001b4c <HAL_InitTick>

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40023c00 	.word	0x40023c00
 8002884:	40023800 	.word	0x40023800
 8002888:	08003890 	.word	0x08003890
 800288c:	20000000 	.word	0x20000000
 8002890:	20000004 	.word	0x20000004

08002894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	607b      	str	r3, [r7, #4]
 80028a0:	2300      	movs	r3, #0
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	2300      	movs	r3, #0
 80028a6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028ac:	4b67      	ldr	r3, [pc, #412]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d00d      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x40>
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	f200 80bd 	bhi.w	8002a38 <HAL_RCC_GetSysClockFreq+0x1a4>
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x34>
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d003      	beq.n	80028ce <HAL_RCC_GetSysClockFreq+0x3a>
 80028c6:	e0b7      	b.n	8002a38 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028c8:	4b61      	ldr	r3, [pc, #388]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80028ca:	60bb      	str	r3, [r7, #8]
       break;
 80028cc:	e0b7      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028ce:	4b61      	ldr	r3, [pc, #388]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80028d0:	60bb      	str	r3, [r7, #8]
      break;
 80028d2:	e0b4      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028d4:	4b5d      	ldr	r3, [pc, #372]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028de:	4b5b      	ldr	r3, [pc, #364]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d04d      	beq.n	8002986 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ea:	4b58      	ldr	r3, [pc, #352]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	099b      	lsrs	r3, r3, #6
 80028f0:	461a      	mov	r2, r3
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028fa:	f04f 0100 	mov.w	r1, #0
 80028fe:	ea02 0800 	and.w	r8, r2, r0
 8002902:	ea03 0901 	and.w	r9, r3, r1
 8002906:	4640      	mov	r0, r8
 8002908:	4649      	mov	r1, r9
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	014b      	lsls	r3, r1, #5
 8002914:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002918:	0142      	lsls	r2, r0, #5
 800291a:	4610      	mov	r0, r2
 800291c:	4619      	mov	r1, r3
 800291e:	ebb0 0008 	subs.w	r0, r0, r8
 8002922:	eb61 0109 	sbc.w	r1, r1, r9
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	018b      	lsls	r3, r1, #6
 8002930:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002934:	0182      	lsls	r2, r0, #6
 8002936:	1a12      	subs	r2, r2, r0
 8002938:	eb63 0301 	sbc.w	r3, r3, r1
 800293c:	f04f 0000 	mov.w	r0, #0
 8002940:	f04f 0100 	mov.w	r1, #0
 8002944:	00d9      	lsls	r1, r3, #3
 8002946:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800294a:	00d0      	lsls	r0, r2, #3
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	eb12 0208 	adds.w	r2, r2, r8
 8002954:	eb43 0309 	adc.w	r3, r3, r9
 8002958:	f04f 0000 	mov.w	r0, #0
 800295c:	f04f 0100 	mov.w	r1, #0
 8002960:	0259      	lsls	r1, r3, #9
 8002962:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002966:	0250      	lsls	r0, r2, #9
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	461a      	mov	r2, r3
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	f7fd fc2c 	bl	80001d4 <__aeabi_uldivmod>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4613      	mov	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	e04a      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002986:	4b31      	ldr	r3, [pc, #196]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	099b      	lsrs	r3, r3, #6
 800298c:	461a      	mov	r2, r3
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002996:	f04f 0100 	mov.w	r1, #0
 800299a:	ea02 0400 	and.w	r4, r2, r0
 800299e:	ea03 0501 	and.w	r5, r3, r1
 80029a2:	4620      	mov	r0, r4
 80029a4:	4629      	mov	r1, r5
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	014b      	lsls	r3, r1, #5
 80029b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029b4:	0142      	lsls	r2, r0, #5
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	1b00      	subs	r0, r0, r4
 80029bc:	eb61 0105 	sbc.w	r1, r1, r5
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	018b      	lsls	r3, r1, #6
 80029ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029ce:	0182      	lsls	r2, r0, #6
 80029d0:	1a12      	subs	r2, r2, r0
 80029d2:	eb63 0301 	sbc.w	r3, r3, r1
 80029d6:	f04f 0000 	mov.w	r0, #0
 80029da:	f04f 0100 	mov.w	r1, #0
 80029de:	00d9      	lsls	r1, r3, #3
 80029e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029e4:	00d0      	lsls	r0, r2, #3
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	1912      	adds	r2, r2, r4
 80029ec:	eb45 0303 	adc.w	r3, r5, r3
 80029f0:	f04f 0000 	mov.w	r0, #0
 80029f4:	f04f 0100 	mov.w	r1, #0
 80029f8:	0299      	lsls	r1, r3, #10
 80029fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80029fe:	0290      	lsls	r0, r2, #10
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	f7fd fbe0 	bl	80001d4 <__aeabi_uldivmod>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4613      	mov	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	3301      	adds	r3, #1
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a34:	60bb      	str	r3, [r7, #8]
      break;
 8002a36:	e002      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a3a:	60bb      	str	r3, [r7, #8]
      break;
 8002a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	00f42400 	.word	0x00f42400
 8002a54:	007a1200 	.word	0x007a1200

08002a58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e07b      	b.n	8002b62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d108      	bne.n	8002a84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a7a:	d009      	beq.n	8002a90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
 8002a82:	e005      	b.n	8002a90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fe ff04 	bl	80018b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ac6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b14:	ea42 0103 	orr.w	r1, r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	0c1b      	lsrs	r3, r3, #16
 8002b2e:	f003 0104 	and.w	r1, r3, #4
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	f003 0210 	and.w	r2, r3, #16
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69da      	ldr	r2, [r3, #28]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b088      	sub	sp, #32
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	603b      	str	r3, [r7, #0]
 8002b76:	4613      	mov	r3, r2
 8002b78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_SPI_Transmit+0x22>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e126      	b.n	8002dda <HAL_SPI_Transmit+0x270>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b94:	f7ff f81e 	bl	8001bd4 <HAL_GetTick>
 8002b98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d002      	beq.n	8002bb0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002baa:	2302      	movs	r3, #2
 8002bac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bae:	e10b      	b.n	8002dc8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <HAL_SPI_Transmit+0x52>
 8002bb6:	88fb      	ldrh	r3, [r7, #6]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d102      	bne.n	8002bc2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bc0:	e102      	b.n	8002dc8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	88fa      	ldrh	r2, [r7, #6]
 8002bda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	88fa      	ldrh	r2, [r7, #6]
 8002be0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c08:	d10f      	bne.n	8002c2a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c34:	2b40      	cmp	r3, #64	; 0x40
 8002c36:	d007      	beq.n	8002c48 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c50:	d14b      	bne.n	8002cea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <HAL_SPI_Transmit+0xf6>
 8002c5a:	8afb      	ldrh	r3, [r7, #22]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d13e      	bne.n	8002cde <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	881a      	ldrh	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	1c9a      	adds	r2, r3, #2
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c84:	e02b      	b.n	8002cde <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d112      	bne.n	8002cba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	881a      	ldrh	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	1c9a      	adds	r2, r3, #2
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	86da      	strh	r2, [r3, #54]	; 0x36
 8002cb8:	e011      	b.n	8002cde <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cba:	f7fe ff8b 	bl	8001bd4 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d803      	bhi.n	8002cd2 <HAL_SPI_Transmit+0x168>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd0:	d102      	bne.n	8002cd8 <HAL_SPI_Transmit+0x16e>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d102      	bne.n	8002cde <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002cdc:	e074      	b.n	8002dc8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1ce      	bne.n	8002c86 <HAL_SPI_Transmit+0x11c>
 8002ce8:	e04c      	b.n	8002d84 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_SPI_Transmit+0x18e>
 8002cf2:	8afb      	ldrh	r3, [r7, #22]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d140      	bne.n	8002d7a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	330c      	adds	r3, #12
 8002d02:	7812      	ldrb	r2, [r2, #0]
 8002d04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d1e:	e02c      	b.n	8002d7a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d113      	bne.n	8002d56 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	330c      	adds	r3, #12
 8002d38:	7812      	ldrb	r2, [r2, #0]
 8002d3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d54:	e011      	b.n	8002d7a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d56:	f7fe ff3d 	bl	8001bd4 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d803      	bhi.n	8002d6e <HAL_SPI_Transmit+0x204>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6c:	d102      	bne.n	8002d74 <HAL_SPI_Transmit+0x20a>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d102      	bne.n	8002d7a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d78:	e026      	b.n	8002dc8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1cd      	bne.n	8002d20 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	6839      	ldr	r1, [r7, #0]
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 fce9 	bl	8003760 <SPI_EndRxTxTransaction>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10a      	bne.n	8002db8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	77fb      	strb	r3, [r7, #31]
 8002dc4:	e000      	b.n	8002dc8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002dc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3720      	adds	r7, #32
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b088      	sub	sp, #32
 8002de6:	af02      	add	r7, sp, #8
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	603b      	str	r3, [r7, #0]
 8002dee:	4613      	mov	r3, r2
 8002df0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dfe:	d112      	bne.n	8002e26 <HAL_SPI_Receive+0x44>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10e      	bne.n	8002e26 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2204      	movs	r2, #4
 8002e0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e10:	88fa      	ldrh	r2, [r7, #6]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	4613      	mov	r3, r2
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f8f1 	bl	8003004 <HAL_SPI_TransmitReceive>
 8002e22:	4603      	mov	r3, r0
 8002e24:	e0ea      	b.n	8002ffc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_SPI_Receive+0x52>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e0e3      	b.n	8002ffc <HAL_SPI_Receive+0x21a>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e3c:	f7fe feca 	bl	8001bd4 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d002      	beq.n	8002e54 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e52:	e0ca      	b.n	8002fea <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_SPI_Receive+0x7e>
 8002e5a:	88fb      	ldrh	r3, [r7, #6]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d102      	bne.n	8002e66 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e64:	e0c1      	b.n	8002fea <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2204      	movs	r2, #4
 8002e6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	88fa      	ldrh	r2, [r7, #6]
 8002e7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	88fa      	ldrh	r2, [r7, #6]
 8002e84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eac:	d10f      	bne.n	8002ece <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ebc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ecc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed8:	2b40      	cmp	r3, #64	; 0x40
 8002eda:	d007      	beq.n	8002eec <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d162      	bne.n	8002fba <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ef4:	e02e      	b.n	8002f54 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d115      	bne.n	8002f30 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f103 020c 	add.w	r2, r3, #12
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f10:	7812      	ldrb	r2, [r2, #0]
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f2e:	e011      	b.n	8002f54 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f30:	f7fe fe50 	bl	8001bd4 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d803      	bhi.n	8002f48 <HAL_SPI_Receive+0x166>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f46:	d102      	bne.n	8002f4e <HAL_SPI_Receive+0x16c>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f52:	e04a      	b.n	8002fea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1cb      	bne.n	8002ef6 <HAL_SPI_Receive+0x114>
 8002f5e:	e031      	b.n	8002fc4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d113      	bne.n	8002f96 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f78:	b292      	uxth	r2, r2
 8002f7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f80:	1c9a      	adds	r2, r3, #2
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f94:	e011      	b.n	8002fba <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f96:	f7fe fe1d 	bl	8001bd4 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d803      	bhi.n	8002fae <HAL_SPI_Receive+0x1cc>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d102      	bne.n	8002fb4 <HAL_SPI_Receive+0x1d2>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d102      	bne.n	8002fba <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fb8:	e017      	b.n	8002fea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1cd      	bne.n	8002f60 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	6839      	ldr	r1, [r7, #0]
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 fb63 	bl	8003694 <SPI_EndRxTransaction>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	75fb      	strb	r3, [r7, #23]
 8002fe6:	e000      	b.n	8002fea <HAL_SPI_Receive+0x208>
  }

error :
 8002fe8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08c      	sub	sp, #48	; 0x30
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003012:	2301      	movs	r3, #1
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_SPI_TransmitReceive+0x26>
 8003026:	2302      	movs	r3, #2
 8003028:	e18a      	b.n	8003340 <HAL_SPI_TransmitReceive+0x33c>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003032:	f7fe fdcf 	bl	8001bd4 <HAL_GetTick>
 8003036:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800303e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003048:	887b      	ldrh	r3, [r7, #2]
 800304a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800304c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003050:	2b01      	cmp	r3, #1
 8003052:	d00f      	beq.n	8003074 <HAL_SPI_TransmitReceive+0x70>
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800305a:	d107      	bne.n	800306c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d103      	bne.n	800306c <HAL_SPI_TransmitReceive+0x68>
 8003064:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003068:	2b04      	cmp	r3, #4
 800306a:	d003      	beq.n	8003074 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800306c:	2302      	movs	r3, #2
 800306e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003072:	e15b      	b.n	800332c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_SPI_TransmitReceive+0x82>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <HAL_SPI_TransmitReceive+0x82>
 8003080:	887b      	ldrh	r3, [r7, #2]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d103      	bne.n	800308e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800308c:	e14e      	b.n	800332c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b04      	cmp	r3, #4
 8003098:	d003      	beq.n	80030a2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2205      	movs	r2, #5
 800309e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	887a      	ldrh	r2, [r7, #2]
 80030b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	887a      	ldrh	r2, [r7, #2]
 80030c4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	887a      	ldrh	r2, [r7, #2]
 80030ca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e2:	2b40      	cmp	r3, #64	; 0x40
 80030e4:	d007      	beq.n	80030f6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030fe:	d178      	bne.n	80031f2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <HAL_SPI_TransmitReceive+0x10a>
 8003108:	8b7b      	ldrh	r3, [r7, #26]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d166      	bne.n	80031dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	881a      	ldrh	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	1c9a      	adds	r2, r3, #2
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003132:	e053      	b.n	80031dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b02      	cmp	r3, #2
 8003140:	d11b      	bne.n	800317a <HAL_SPI_TransmitReceive+0x176>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d016      	beq.n	800317a <HAL_SPI_TransmitReceive+0x176>
 800314c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314e:	2b01      	cmp	r3, #1
 8003150:	d113      	bne.n	800317a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	881a      	ldrh	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	1c9a      	adds	r2, r3, #2
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b01      	cmp	r3, #1
 8003186:	d119      	bne.n	80031bc <HAL_SPI_TransmitReceive+0x1b8>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d014      	beq.n	80031bc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319c:	b292      	uxth	r2, r2
 800319e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a4:	1c9a      	adds	r2, r3, #2
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031b8:	2301      	movs	r3, #1
 80031ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031bc:	f7fe fd0a 	bl	8001bd4 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d807      	bhi.n	80031dc <HAL_SPI_TransmitReceive+0x1d8>
 80031cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d2:	d003      	beq.n	80031dc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80031da:	e0a7      	b.n	800332c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1a6      	bne.n	8003134 <HAL_SPI_TransmitReceive+0x130>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1a1      	bne.n	8003134 <HAL_SPI_TransmitReceive+0x130>
 80031f0:	e07c      	b.n	80032ec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_SPI_TransmitReceive+0x1fc>
 80031fa:	8b7b      	ldrh	r3, [r7, #26]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d16b      	bne.n	80032d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	330c      	adds	r3, #12
 800320a:	7812      	ldrb	r2, [r2, #0]
 800320c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003226:	e057      	b.n	80032d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b02      	cmp	r3, #2
 8003234:	d11c      	bne.n	8003270 <HAL_SPI_TransmitReceive+0x26c>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d017      	beq.n	8003270 <HAL_SPI_TransmitReceive+0x26c>
 8003240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003242:	2b01      	cmp	r3, #1
 8003244:	d114      	bne.n	8003270 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	330c      	adds	r3, #12
 8003250:	7812      	ldrb	r2, [r2, #0]
 8003252:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003262:	b29b      	uxth	r3, r3
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b01      	cmp	r3, #1
 800327c:	d119      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x2ae>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d014      	beq.n	80032b2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032ae:	2301      	movs	r3, #1
 80032b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032b2:	f7fe fc8f 	bl	8001bd4 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032be:	429a      	cmp	r2, r3
 80032c0:	d803      	bhi.n	80032ca <HAL_SPI_TransmitReceive+0x2c6>
 80032c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c8:	d102      	bne.n	80032d0 <HAL_SPI_TransmitReceive+0x2cc>
 80032ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d103      	bne.n	80032d8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80032d6:	e029      	b.n	800332c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1a2      	bne.n	8003228 <HAL_SPI_TransmitReceive+0x224>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d19d      	bne.n	8003228 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 fa35 	bl	8003760 <SPI_EndRxTxTransaction>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d006      	beq.n	800330a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003308:	e010      	b.n	800332c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10b      	bne.n	800332a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	e000      	b.n	800332c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800332a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800333c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003340:	4618      	mov	r0, r3
 8003342:	3730      	adds	r7, #48	; 0x30
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	099b      	lsrs	r3, r3, #6
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10f      	bne.n	800338c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	099b      	lsrs	r3, r3, #6
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d004      	beq.n	800338c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	4798      	blx	r3
    return;
 800338a:	e0d7      	b.n	800353c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	085b      	lsrs	r3, r3, #1
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <HAL_SPI_IRQHandler+0x66>
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	09db      	lsrs	r3, r3, #7
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d004      	beq.n	80033ae <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	4798      	blx	r3
    return;
 80033ac:	e0c6      	b.n	800353c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10c      	bne.n	80033d4 <HAL_SPI_IRQHandler+0x8c>
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	099b      	lsrs	r3, r3, #6
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	0a1b      	lsrs	r3, r3, #8
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80b4 	beq.w	800353c <HAL_SPI_IRQHandler+0x1f4>
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80ad 	beq.w	800353c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	099b      	lsrs	r3, r3, #6
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d023      	beq.n	8003436 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d011      	beq.n	800341e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fe:	f043 0204 	orr.w	r2, r3, #4
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	e00b      	b.n	8003436 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800341e:	2300      	movs	r3, #0
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	693b      	ldr	r3, [r7, #16]
        return;
 8003434:	e082      	b.n	800353c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d014      	beq.n	800346c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003446:	f043 0201 	orr.w	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	0a1b      	lsrs	r3, r3, #8
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00c      	beq.n	8003492 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347c:	f043 0208 	orr.w	r2, r3, #8
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003484:	2300      	movs	r3, #0
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003496:	2b00      	cmp	r3, #0
 8003498:	d04f      	beq.n	800353a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034a8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d104      	bne.n	80034c6 <HAL_SPI_IRQHandler+0x17e>
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d034      	beq.n	8003530 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0203 	bic.w	r2, r2, #3
 80034d4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d011      	beq.n	8003502 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e2:	4a18      	ldr	r2, [pc, #96]	; (8003544 <HAL_SPI_IRQHandler+0x1fc>)
 80034e4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe fcb3 	bl	8001e56 <HAL_DMA_Abort_IT>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003506:	2b00      	cmp	r3, #0
 8003508:	d016      	beq.n	8003538 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350e:	4a0d      	ldr	r2, [pc, #52]	; (8003544 <HAL_SPI_IRQHandler+0x1fc>)
 8003510:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003516:	4618      	mov	r0, r3
 8003518:	f7fe fc9d 	bl	8001e56 <HAL_DMA_Abort_IT>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003526:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800352e:	e003      	b.n	8003538 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f809 	bl	8003548 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003536:	e000      	b.n	800353a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003538:	bf00      	nop
    return;
 800353a:	bf00      	nop
  }
}
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	0800355d 	.word	0x0800355d

08003548 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003568:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f7ff ffe6 	bl	8003548 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800357c:	bf00      	nop
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	4613      	mov	r3, r2
 8003592:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003594:	f7fe fb1e 	bl	8001bd4 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359c:	1a9b      	subs	r3, r3, r2
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	4413      	add	r3, r2
 80035a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035a4:	f7fe fb16 	bl	8001bd4 <HAL_GetTick>
 80035a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035aa:	4b39      	ldr	r3, [pc, #228]	; (8003690 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	015b      	lsls	r3, r3, #5
 80035b0:	0d1b      	lsrs	r3, r3, #20
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	fb02 f303 	mul.w	r3, r2, r3
 80035b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035ba:	e054      	b.n	8003666 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c2:	d050      	beq.n	8003666 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035c4:	f7fe fb06 	bl	8001bd4 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	69fa      	ldr	r2, [r7, #28]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d902      	bls.n	80035da <SPI_WaitFlagStateUntilTimeout+0x56>
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d13d      	bne.n	8003656 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035f2:	d111      	bne.n	8003618 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035fc:	d004      	beq.n	8003608 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003606:	d107      	bne.n	8003618 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003616:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003620:	d10f      	bne.n	8003642 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003640:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e017      	b.n	8003686 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	3b01      	subs	r3, #1
 8003664:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4013      	ands	r3, r2
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	429a      	cmp	r2, r3
 8003674:	bf0c      	ite	eq
 8003676:	2301      	moveq	r3, #1
 8003678:	2300      	movne	r3, #0
 800367a:	b2db      	uxtb	r3, r3
 800367c:	461a      	mov	r2, r3
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	429a      	cmp	r2, r3
 8003682:	d19b      	bne.n	80035bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3720      	adds	r7, #32
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000000 	.word	0x20000000

08003694 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af02      	add	r7, sp, #8
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036a8:	d111      	bne.n	80036ce <SPI_EndRxTransaction+0x3a>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b2:	d004      	beq.n	80036be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036bc:	d107      	bne.n	80036ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036d6:	d12a      	bne.n	800372e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e0:	d012      	beq.n	8003708 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2200      	movs	r2, #0
 80036ea:	2180      	movs	r1, #128	; 0x80
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f7ff ff49 	bl	8003584 <SPI_WaitFlagStateUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d02d      	beq.n	8003754 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fc:	f043 0220 	orr.w	r2, r3, #32
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e026      	b.n	8003756 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2200      	movs	r2, #0
 8003710:	2101      	movs	r1, #1
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f7ff ff36 	bl	8003584 <SPI_WaitFlagStateUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d01a      	beq.n	8003754 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003722:	f043 0220 	orr.w	r2, r3, #32
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e013      	b.n	8003756 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2200      	movs	r2, #0
 8003736:	2101      	movs	r1, #1
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f7ff ff23 	bl	8003584 <SPI_WaitFlagStateUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d007      	beq.n	8003754 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003748:	f043 0220 	orr.w	r2, r3, #32
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e000      	b.n	8003756 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af02      	add	r7, sp, #8
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800376c:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <SPI_EndRxTxTransaction+0x7c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a1b      	ldr	r2, [pc, #108]	; (80037e0 <SPI_EndRxTxTransaction+0x80>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	0d5b      	lsrs	r3, r3, #21
 8003778:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800377c:	fb02 f303 	mul.w	r3, r2, r3
 8003780:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800378a:	d112      	bne.n	80037b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2200      	movs	r2, #0
 8003794:	2180      	movs	r1, #128	; 0x80
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f7ff fef4 	bl	8003584 <SPI_WaitFlagStateUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d016      	beq.n	80037d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a6:	f043 0220 	orr.w	r2, r3, #32
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e00f      	b.n	80037d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c8:	2b80      	cmp	r3, #128	; 0x80
 80037ca:	d0f2      	beq.n	80037b2 <SPI_EndRxTxTransaction+0x52>
 80037cc:	e000      	b.n	80037d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80037ce:	bf00      	nop
  }

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000000 	.word	0x20000000
 80037e0:	165e9f81 	.word	0x165e9f81

080037e4 <__libc_init_array>:
 80037e4:	b570      	push	{r4, r5, r6, lr}
 80037e6:	4d0d      	ldr	r5, [pc, #52]	; (800381c <__libc_init_array+0x38>)
 80037e8:	4c0d      	ldr	r4, [pc, #52]	; (8003820 <__libc_init_array+0x3c>)
 80037ea:	1b64      	subs	r4, r4, r5
 80037ec:	10a4      	asrs	r4, r4, #2
 80037ee:	2600      	movs	r6, #0
 80037f0:	42a6      	cmp	r6, r4
 80037f2:	d109      	bne.n	8003808 <__libc_init_array+0x24>
 80037f4:	4d0b      	ldr	r5, [pc, #44]	; (8003824 <__libc_init_array+0x40>)
 80037f6:	4c0c      	ldr	r4, [pc, #48]	; (8003828 <__libc_init_array+0x44>)
 80037f8:	f000 f82e 	bl	8003858 <_init>
 80037fc:	1b64      	subs	r4, r4, r5
 80037fe:	10a4      	asrs	r4, r4, #2
 8003800:	2600      	movs	r6, #0
 8003802:	42a6      	cmp	r6, r4
 8003804:	d105      	bne.n	8003812 <__libc_init_array+0x2e>
 8003806:	bd70      	pop	{r4, r5, r6, pc}
 8003808:	f855 3b04 	ldr.w	r3, [r5], #4
 800380c:	4798      	blx	r3
 800380e:	3601      	adds	r6, #1
 8003810:	e7ee      	b.n	80037f0 <__libc_init_array+0xc>
 8003812:	f855 3b04 	ldr.w	r3, [r5], #4
 8003816:	4798      	blx	r3
 8003818:	3601      	adds	r6, #1
 800381a:	e7f2      	b.n	8003802 <__libc_init_array+0x1e>
 800381c:	080038a8 	.word	0x080038a8
 8003820:	080038a8 	.word	0x080038a8
 8003824:	080038a8 	.word	0x080038a8
 8003828:	080038ac 	.word	0x080038ac

0800382c <memcpy>:
 800382c:	440a      	add	r2, r1
 800382e:	4291      	cmp	r1, r2
 8003830:	f100 33ff 	add.w	r3, r0, #4294967295
 8003834:	d100      	bne.n	8003838 <memcpy+0xc>
 8003836:	4770      	bx	lr
 8003838:	b510      	push	{r4, lr}
 800383a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800383e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003842:	4291      	cmp	r1, r2
 8003844:	d1f9      	bne.n	800383a <memcpy+0xe>
 8003846:	bd10      	pop	{r4, pc}

08003848 <memset>:
 8003848:	4402      	add	r2, r0
 800384a:	4603      	mov	r3, r0
 800384c:	4293      	cmp	r3, r2
 800384e:	d100      	bne.n	8003852 <memset+0xa>
 8003850:	4770      	bx	lr
 8003852:	f803 1b01 	strb.w	r1, [r3], #1
 8003856:	e7f9      	b.n	800384c <memset+0x4>

08003858 <_init>:
 8003858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385a:	bf00      	nop
 800385c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385e:	bc08      	pop	{r3}
 8003860:	469e      	mov	lr, r3
 8003862:	4770      	bx	lr

08003864 <_fini>:
 8003864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003866:	bf00      	nop
 8003868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386a:	bc08      	pop	{r3}
 800386c:	469e      	mov	lr, r3
 800386e:	4770      	bx	lr
